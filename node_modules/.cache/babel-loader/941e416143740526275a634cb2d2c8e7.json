{"ast":null,"code":"import _slicedToArray from \"/Users/Johan/fugu/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Johan/fugu/src/Game.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport Swal from \"sweetalert2\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {\n      let title = winner === null ? \"Tie game!\" : \"Player \".concat(winner, \" won!\"); // Show this if the player is not the room creator\n\n      if (this.props.isRoomCreator === false && this.gameOver) {\n        Swal.fire({\n          position: \"top\",\n          allowOutsideClick: false,\n          title: title,\n          text: \"Waiting for a new round...\",\n          confirmButtonColor: \"rgb(208,33,41)\",\n          width: 275,\n          customClass: {\n            heightAuto: false,\n            title: \"title-class\",\n            popup: \"popup-class\",\n            confirmButton: \"button-class\"\n          }\n        });\n        this.turn = \"X\"; // Set turn to X so Player O can't make a move\n      } // Show this to the room creator\n      else if (this.props.isRoomCreator && this.gameOver) {\n          Swal.fire({\n            position: \"top\",\n            allowOutsideClick: false,\n            title: title,\n            text: \"Continue Playing?\",\n            showCancelButton: true,\n            confirmButtonColor: \"rgb(208,33,41)\",\n            cancelButtonColor: \"#aaa\",\n            cancelButtonText: \"Nope\",\n            confirmButtonText: \"Yea!\",\n            width: 275,\n            customClass: {\n              heightAuto: false,\n              title: \"title-class\",\n              popup: \"popup-class\",\n              confirmButton: \"button-class\",\n              cancelButton: \"button-class\"\n            }\n          }).then(result => {\n            // Start a new round\n            if (result.value) {\n              this.props.pubnub.publish({\n                message: {\n                  reset: true\n                },\n                channel: this.props.gameChannel\n              });\n            } else {\n              // End the game\n              this.props.pubnub.publish({\n                message: {\n                  endGame: true\n                },\n                channel: this.props.gameChannel\n              });\n            }\n          });\n        }\n    };\n\n    this.announceWinner = winner => {\n      let pieces = {\n        X: this.state.xScore,\n        O: this.state.oScore\n      };\n\n      if (winner === \"X\") {\n        pieces[\"X\"] += 1;\n        this.setState({\n          xScore: pieces[\"X\"]\n        });\n      } else {\n        pieces[\"O\"] += 1;\n        this.setState({\n          oScore: pieces[\"O\"]\n        });\n      } // End the game once there is a winner\n\n\n      this.gameOver = true;\n      this.newRound(winner);\n    };\n\n    this.checkForWinner = squares => {\n      // Possible winning combinations\n      const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\n        const _possibleCombinations = _slicedToArray(possibleCombinations[i], 3),\n              a = _possibleCombinations[0],\n              b = _possibleCombinations[1],\n              c = _possibleCombinations[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          this.announceWinner(squares[a]);\n          return;\n        }\n      } // Check if the game ends in a draw\n\n\n      this.counter++; // The board is filled up and there is no winner\n\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.newRound(null);\n      }\n    };\n\n    this.publishMove = (index, piece) => {\n      const squares = this.state.squares;\n      squares[index] = piece;\n      this.turn = squares[index] === \"X\" ? \"O\" : \"X\";\n      this.setState({\n        squares: squares,\n        whosTurn: !this.state.whosTurn\n      });\n      this.checkForWinner(squares);\n    };\n\n    this.onMakeMove = sushi => {\n      //const placed = this.props.placed;\n      console.log(\"We are about to make a move\"); // Check if the square is empty and if it's the player's turn to make a move\n\n      if (this.turn === this.props.piece) {\n        //squares[index] = this.props.piece;\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        }); // Other player's turn to make a move\n\n        this.turn = this.turn < this.props.occupancy ? 2 : 1; // Publish move to the channel\n\n        this.props.pubnub.publish({\n          message: {\n            piece: this.props.piece,\n            turn: this.turn\n          },\n          channel: this.props.gameChannel\n        });\n        console.log(\"We made a move\"); //Check if there is a winner\n        //this.checkForWinner(squares);\n      }\n    };\n\n    this.showChoices = e => {\n      (async () => {\n        /* inputOptions can be an object or Promise */\n        const inputOptions = new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              true: \"Normal sushi\",\n              false: \"Fugu sushi\",\n              eat: \"Start eating!\"\n            });\n          }, 1000);\n        });\n\n        const _ref = await Swal.fire({\n          title: \"What sushi would you like to place?\",\n          input: \"radio\",\n          inputOptions: inputOptions,\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n          confirmButtonText: \"Place sushi\",\n          inputValidator: value => {\n            if (!value) {\n              return \"You need to choose something!\";\n            } else {\n              if (value === \"true\" && !this.props.sushis.includes(true)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n\n              if (value === \"false\" && !this.props.sushis.includes(false)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n            }\n          }\n        }),\n              sushi = _ref.value;\n\n        if (sushi) {\n          if (sushi === \"true\") {\n            this.props.placed.push(true);\n            this.props.sushis.shift();\n            console.log(\"this is what you have placed \" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.sushis);\n          }\n\n          if (sushi === \"false\") {\n            this.props.placed.push(false);\n            this.props.sushis.pop();\n            console.log(\"this is what you have placed\" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.sushis);\n          }\n\n          if (sushi === \"eat\") {\n            this.eat = true;\n          }\n\n          this.onMakeMove(sushi);\n          Swal.fire({\n            html: \"you selected \".concat(sushi)\n          });\n          console.log(this.state.placed);\n          console.log(this.state.sushis);\n        }\n      })();\n    };\n\n    this.state = {\n      squares: Array(9).fill(\"\"),\n      // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      eating: false //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n\n    };\n    this.turn = 1;\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      // Publish move to the opponent's board\n      if (msg.message.turn === this.props.piece) {\n        this.publishMove(msg.message.index, msg.message.piece);\n      } // Start a new round\n      else if (msg.message.reset) {\n          this.setState({\n            squares: Array(9).fill(\"\"),\n            whosTurn: this.props.myTurn\n          });\n          this.turn = 1;\n          this.gameOver = false;\n          this.counter = 0;\n          Swal.close();\n        } // End the game and go back to the lobby\n        else if (msg.message.endGame) {\n            Swal.close();\n            this.props.endGame();\n          }\n    });\n  }\n\n  render() {\n    let status; // Change to current player's turn\n\n    status = \"\".concat(this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\");\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: index => this.onMakeMove(index),\n      placed: this.placed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      className: \"move-button\",\n      disabled: !this.state.whosTurn,\n      onClick: e => this.showChoices(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \" \", \"Make move\"), React.createElement(\"button\", {\n      className: \"move-button\",\n      disabled: !this.state.whosTurn,\n      onClick: e => console.log(this.state.whosTurn),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \" \", \"Make move\")), React.createElement(\"div\", {\n      className: \"scores-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Player X: \", this.state.xScore, \" \")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Player O: \", this.state.oScore, \" \"))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/Johan/fugu/src/Game.js"],"names":["React","Board","Swal","Game","Component","constructor","props","newRound","winner","title","isRoomCreator","gameOver","fire","position","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","value","pubnub","publish","message","reset","channel","gameChannel","endGame","announceWinner","pieces","X","state","xScore","O","oScore","setState","checkForWinner","squares","possibleCombinations","i","length","a","b","c","counter","publishMove","index","piece","whosTurn","onMakeMove","sushi","console","log","occupancy","showChoices","e","inputOptions","Promise","resolve","setTimeout","true","false","eat","input","allowEscapeKey","inputValidator","sushis","includes","placed","push","shift","pop","html","Array","fill","myTurn","eating","componentDidMount","getMessage","msg","close","render","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\nimport Swal from \"sweetalert2\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"\"), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      eating: false\n      //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n    };\n\n    this.turn = 1;\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      // Publish move to the opponent's board\n      if (msg.message.turn === this.props.piece) {\n        this.publishMove(msg.message.index, msg.message.piece);\n      }\n\n      // Start a new round\n      else if (msg.message.reset) {\n        this.setState({\n          squares: Array(9).fill(\"\"),\n          whosTurn: this.props.myTurn\n        });\n\n        this.turn = 1;\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close();\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  newRound = winner => {\n    let title = winner === null ? \"Tie game!\" : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    if (this.props.isRoomCreator === false && this.gameOver) {\n      Swal.fire({\n        position: \"top\",\n        allowOutsideClick: false,\n        title: title,\n        text: \"Waiting for a new round...\",\n        confirmButtonColor: \"rgb(208,33,41)\",\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: \"title-class\",\n          popup: \"popup-class\",\n          confirmButton: \"button-class\"\n        }\n      });\n      this.turn = \"X\"; // Set turn to X so Player O can't make a move\n    }\n\n    // Show this to the room creator\n    else if (this.props.isRoomCreator && this.gameOver) {\n      Swal.fire({\n        position: \"top\",\n        allowOutsideClick: false,\n        title: title,\n        text: \"Continue Playing?\",\n        showCancelButton: true,\n        confirmButtonColor: \"rgb(208,33,41)\",\n        cancelButtonColor: \"#aaa\",\n        cancelButtonText: \"Nope\",\n        confirmButtonText: \"Yea!\",\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: \"title-class\",\n          popup: \"popup-class\",\n          confirmButton: \"button-class\",\n          cancelButton: \"button-class\"\n        }\n      }).then(result => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        } else {\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      });\n    }\n  };\n\n  // Update score for the winner\n  announceWinner = winner => {\n    let pieces = {\n      X: this.state.xScore,\n      O: this.state.oScore\n    };\n\n    if (winner === \"X\") {\n      pieces[\"X\"] += 1;\n      this.setState({\n        xScore: pieces[\"X\"]\n      });\n    } else {\n      pieces[\"O\"] += 1;\n      this.setState({\n        oScore: pieces[\"O\"]\n      });\n    }\n    // End the game once there is a winner\n    this.gameOver = true;\n    this.newRound(winner);\n  };\n\n  checkForWinner = squares => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter++;\n    // The board is filled up and there is no winner\n    if (this.counter === 9) {\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n\n  // Opponent's move is published to the board\n  publishMove = (index, piece) => {\n    const squares = this.state.squares;\n\n    squares[index] = piece;\n    this.turn = squares[index] === \"X\" ? \"O\" : \"X\";\n\n    this.setState({\n      squares: squares,\n      whosTurn: !this.state.whosTurn\n    });\n\n    this.checkForWinner(squares);\n  };\n\n  onMakeMove = sushi => {\n    //const placed = this.props.placed;\n    console.log(\"We are about to make a move\");\n\n    // Check if the square is empty and if it's the player's turn to make a move\n    if (this.turn === this.props.piece) {\n      //squares[index] = this.props.piece;\n\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n\n      // Other player's turn to make a move\n      this.turn = this.turn < this.props.occupancy ? 2 : 1;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"We made a move\");\n\n      //Check if there is a winner\n      //this.checkForWinner(squares);\n    }\n  };\n\n  showChoices = e => {\n    (async () => {\n      /* inputOptions can be an object or Promise */\n      const inputOptions = new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            true: \"Normal sushi\",\n            false: \"Fugu sushi\",\n            eat: \"Start eating!\"\n          });\n        }, 1000);\n      });\n\n      const { value: sushi } = await Swal.fire({\n        title: \"What sushi would you like to place?\",\n        input: \"radio\",\n        inputOptions: inputOptions,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        confirmButtonText: \"Place sushi\",\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to choose something!\";\n          } else {\n            if (value === \"true\" && !this.props.sushis.includes(true)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n\n            if (value === \"false\" && !this.props.sushis.includes(false)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n          }\n        }\n      });\n\n      if (sushi) {\n        if (sushi === \"true\") {\n          this.props.placed.push(true);\n          this.props.sushis.shift();\n          console.log(\"this is what you have placed \" + this.props.placed);\n          console.log(\"And this is what you have left \" + this.props.sushis);\n        }\n        if (sushi === \"false\") {\n          this.props.placed.push(false);\n          this.props.sushis.pop();\n          console.log(\"this is what you have placed\" + this.props.placed);\n          console.log(\"And this is what you have left \" + this.props.sushis);\n        }\n        if (sushi === \"eat\") {\n          this.eat = true;\n        }\n        this.onMakeMove(sushi);\n        Swal.fire({ html: `you selected ${sushi}` });\n        console.log(this.state.placed);\n        console.log(this.state.sushis);\n      }\n    })();\n  };\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <Board\n            squares={this.state.squares}\n            onClick={index => this.onMakeMove(index)}\n            placed={this.placed}\n          />\n          <p className=\"status-info\">{status}</p>\n          <button\n            className=\"move-button\"\n            disabled={!this.state.whosTurn}\n            onClick={e => this.showChoices()}\n          >\n            {\" \"}\n            Make move\n          </button>\n          <button\n            className=\"move-button\"\n            disabled={!this.state.whosTurn}\n            onClick={e => console.log(this.state.whosTurn)}\n          >\n            {\" \"}\n            Make move\n          </button>\n        </div>\n\n        <div className=\"scores-container\">\n          <div>\n            <p>Player X: {this.state.xScore} </p>\n          </div>\n\n          <div>\n            <p>Player O: {this.state.oScore} </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}