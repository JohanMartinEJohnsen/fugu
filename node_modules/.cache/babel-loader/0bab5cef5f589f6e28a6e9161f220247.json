{"ast":null,"code":"import _slicedToArray from \"/Users/Johan/fugu/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Johan/fugu/src/Game.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport EatingBoard from \"./EatingBoard\";\nimport Swal from \"sweetalert2\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {\n      let title = winner === null ? \"Tie game!\" : \"Player \".concat(winner, \" won!\"); // Show this if the player is not the room creator\n\n      if (this.props.isRoomCreator === false && this.gameOver) {\n        Swal.fire({\n          position: \"top\",\n          allowOutsideClick: false,\n          title: title,\n          text: \"Waiting for a new round...\",\n          confirmButtonColor: \"rgb(208,33,41)\",\n          width: 275,\n          customClass: {\n            heightAuto: false,\n            title: \"title-class\",\n            popup: \"popup-class\",\n            confirmButton: \"button-class\"\n          }\n        });\n        this.turn = 0; // Set turn to 1 so Player 2 can't make a move\n      } // Show this to the room creator\n      else if (this.props.isRoomCreator && this.gameOver) {\n          Swal.fire({\n            position: \"top\",\n            allowOutsideClick: false,\n            title: title,\n            text: \"Continue Playing?\",\n            showCancelButton: true,\n            confirmButtonColor: \"rgb(208,33,41)\",\n            cancelButtonColor: \"#aaa\",\n            cancelButtonText: \"Nope\",\n            confirmButtonText: \"Yea!\",\n            width: 275,\n            customClass: {\n              heightAuto: false,\n              title: \"title-class\",\n              popup: \"popup-class\",\n              confirmButton: \"button-class\",\n              cancelButton: \"button-class\"\n            }\n          }).then(result => {\n            // Start a new round\n            if (result.value) {\n              this.props.pubnub.publish({\n                message: {\n                  reset: true\n                },\n                channel: this.props.gameChannel\n              });\n            } else {\n              // End the game\n              this.props.pubnub.publish({\n                message: {\n                  endGame: true\n                },\n                channel: this.props.gameChannel\n              });\n            }\n          });\n        }\n    };\n\n    this.announceEating = (player, amount) => {\n      this.props.pubnub.publish({\n        message: {\n          eatingStage: true,\n          whoEating: player,\n          amount: amount,\n          bidding: false\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.announceBidding = (e, player, lastAmount) => {\n      //tell other players the game is moving into the bidding phase\n      this.props.pubnub.publish({\n        message: {\n          bidding: true,\n          amountEaten: e,\n          ateBy: player,\n          lastAmount: lastAmount\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.annouceWinner = bidder => {\n      this.props.pubnub.publish({\n        message: {\n          success: true,\n          userName: this.props.userName\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.annouceFail = bidder => {\n      this.props.pubnub.publish({\n        message: {\n          failed: true,\n          userName: this.props.userName\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.checkForWinner = squares => {\n      // Possible winning combinations\n      const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\n        const _possibleCombinations = _slicedToArray(possibleCombinations[i], 3),\n              a = _possibleCombinations[0],\n              b = _possibleCombinations[1],\n              c = _possibleCombinations[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          this.announceWinner(squares[a]);\n          return;\n        }\n      } // Check if the game ends in a draw\n\n\n      this.counter++; // The board is filled up and there is no winner\n\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.newRound(null);\n      }\n    };\n\n    this.myMove = e => {\n      //this.turn = this.turn === 1 ? 2 : 1;\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n    };\n\n    this.publishBidding = (e, player) => {\n      //Setter whos bidding til neste som skal spise\n      this.whosBidding = player + 1 === this.props.players.length ? 0 : player + 1;\n\n      if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n        if (this.state.passBidding) {\n          this.announceBidding(null, this.whosBidding, e);\n          this.setState({\n            whosTurn: !this.state.whosTurn\n          });\n        } else {\n          this.eat(e, this.whosBidding);\n        }\n      } else {\n        console.log(\"Noen andre skal spise akkuratt nÃ¥\");\n      }\n    };\n\n    this.onMakeMove = sushi => {\n      //const placed = this.props.placed;\n      console.log(\"We are about to make a move\"); // Check if the square is empty and if it's the player's turn to make a move\n      //squares[index] = this.props.piece;\n\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n      console.log(\"now this player is making a move\" + this.turn);\n      console.log(\"the total capacity is\" + this.props.occupancy); // Other player's turn to make a move\n\n      this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n      console.log(\" next move will be made by player \" + this.props.players[this.turn]); // Publish move to the channel\n\n      this.props.pubnub.publish({\n        message: {\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"We made a move\"); //Check if there is a winner\n      //this.checkForWinner(squares);\n    };\n\n    this.eat = (e, player) => {\n      const a = parseInt(e) + 1;\n      Swal.fire({\n        title: \"How many pieces do you think you can eat?\",\n        input: \"number\",\n        showCancelButton: true,\n        cancelButtonText: \"Pass\",\n        cancelButtonColor: \"Orange\",\n        inputAttributes: {\n          min: a\n        },\n        confirmButtonText: \"Eat\",\n        allowOutsideClick: false\n      }).then(result => {\n        if (result.value) {\n          console.log(\"DU mener du kan spise \" + result.value);\n          this.bid = result.value;\n          this.announceBidding(result.value, player);\n        } else {\n          this.setState({\n            passBidding: true,\n            bidding: false\n          });\n          console.log(\"Du har passet\");\n          this.announceBidding(null, player, e);\n        }\n      });\n    };\n\n    this.showChoices = e => {\n      (async () => {\n        /* inputOptions can be an object or Promise */\n        const inputOptions = new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              true: \"Normal sushi\",\n              false: \"Fugu sushi\",\n              eat: \"Start bidding!\"\n            });\n          }, 1000);\n        });\n\n        const _ref = await Swal.fire({\n          title: \"What sushi would you like to place?\",\n          input: \"radio\",\n          inputOptions: inputOptions,\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n          confirmButtonText: \"Place sushi\",\n          inputValidator: value => {\n            if (!value) {\n              return \"You need to choose something!\";\n            } else {\n              if (value === \"true\" && !this.props.sushis.includes(true)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n\n              if (value === \"false\" && !this.props.sushis.includes(false)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n            }\n          }\n        }),\n              sushi = _ref.value;\n\n        if (sushi) {\n          if (sushi === \"eat\") {\n            this.whosBidding = this.turn;\n            this.announceBidding(0);\n            this.setState({\n              bidding: true\n            });\n            this.eat(0, this.whosBidding);\n          } else {\n            if (sushi === \"true\") {\n              this.props.placed.push(true);\n              this.props.sushis.shift();\n              console.log(\"this is what you have placed \" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.sushis);\n            }\n\n            if (sushi === \"false\") {\n              this.props.placed.push(false);\n              this.props.sushis.pop();\n              console.log(\"this is what you have placed\" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.players);\n            }\n\n            this.onMakeMove(sushi); //Swal.fire({ html: `you selected ${sushi}` });\n\n            console.log(this.state.placed);\n            console.log(this.state.sushis);\n          }\n        }\n      })();\n    };\n\n    this.sendSushi = e => {\n      this.props.pubnub.publish({\n        message: {\n          clicked: true,\n          sushi: this.props.placed.pop()\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"Sushi har blitt sendt\");\n    };\n\n    this.eatOwnSushi = placed => {\n      while (this.props.placed.length > 0) {\n        const s = this.props.placed.pop();\n\n        if (!s) {\n          this.annouceFail();\n          this.LoosePiece();\n          break;\n        } else {\n          this.bid -= 1;\n\n          if (this.bid === 0) {\n            this.annouceWinner(); // Needs to be implemented\n\n            break;\n          }\n        }\n      }\n\n      console.log(\"Vi er ferdig meg while lÃ¸kken\");\n      console.log(this.bid);\n    };\n\n    this.eatSushi = sushi => {\n      console.log(\"NÃ¥ skal vi spise en sushi\");\n\n      if (!sushi) {\n        this.annouceFail(); //This person has failed the attempt and looses a piece.\n\n        this.LoosePiece();\n      } else if (sushi) {\n        this.bid -= 1;\n        console.log(\"Vi har trukket fra en sushi\");\n        console.log(this.bid);\n\n        if (this.bid === 0) {\n          console.log(\"Vi er inne i vinner iffen\");\n          this.announceWinner();\n        }\n      }\n    };\n\n    this.LoosePiece = e => {\n      //Denne funker ikke fordi sushis arrayen mister innhold nÃ¥r de gÃ¥r over til placed.\n      if (this.props.pieces.includes(false)) {\n        const n = Math.floor(Math.random() * this.props.pieces.length);\n\n        if (n === 1) {\n          this.props.pieces.pop();\n          console.log(\"Du mistet en fugu sushi\");\n        } else {\n          this.props.pieces.shift();\n          console.log(\"Du mistet en vanlig sushi\");\n        }\n      } else {\n        this.props.pieces.pop();\n        console.log(\"Du mistet en valig sushi siden du ikke har noen fuhuer igjen\");\n      }\n    };\n\n    this.state = {\n      squares: Array(9).fill(\"\"),\n      // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n\n    };\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      if (msg.message.turn < 1000) {\n        console.log(\"vi er inne i den nye IFffen\");\n        this.turn = msg.message.turn;\n\n        if (this.props.players[msg.message.turn] === this.props.userName) {\n          this.myMove(msg.message.index, msg.message.piece);\n        }\n      } else if (msg.message.bidding) {\n        if (msg.message.amountEaten > 0) {\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n          console.log(\"Player \" + msg.message.ateBy + \"Ate \" + msg.message.amountEaten);\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n        } else if (msg.message.amountEaten === null) {\n          console.log(\"Last player passed\");\n\n          if (msg.message.lastAmount === this.bid) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n          } else {\n            this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n          }\n        } else {\n          console.log(\"Vi er inne i elsen og denne spilleren skal begynne Ã¥ spise \" + this.whosBidding);\n          this.setState({\n            bidding: true\n          });\n        }\n\n        console.log(\"LETS START BIDDING!\");\n      } else if (msg.message.eatingStage) {\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      } else if (msg.message.clicked && this.state.lastBidding) {\n        this.eatSushi(msg.message.sushi);\n      } // Start a new round\n      else if (msg.message.reset) {\n          this.setState({\n            squares: Array(9).fill(\"\"),\n            whosTurn: this.props.myTurn\n          });\n          this.turn = 0;\n          this.gameOver = false;\n          this.counter = 0;\n          Swal.close();\n        } else if (msg.message.failed) {\n          Swal.fire({\n            icon: \"error\",\n            title: \"Oops...\",\n            text: \"The attempt failed. The atempting player will loose a random sushi.\"\n          });\n        } else if (msg.message.success) {\n          Swal.fire({\n            icon: \"success\",\n            title: \"Wohooo!\",\n            text: \"The attempt was a success. The atempting player will receive one point!.\"\n          });\n        } // End the game and go back to the lobby\n        else if (msg.message.endGame) {\n            Swal.close();\n            this.props.endGame();\n          }\n    });\n  }\n\n  render() {\n    let status; // Change to current player's turn\n\n    status = \"\".concat(this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\");\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, !this.state.eatingStage && React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: this.state.squares //onClick={index => this.onMakeMove(index)}\n      ,\n      placed: this.props.placed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"functions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      className: \"move-button\",\n      disabled: !this.state.whosTurn,\n      onClick: e => this.showChoices(),\n      hidden: this.state.bidding || this.state.passBidding || this.state.eatingStage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \" \", \"Make move\"))), this.state.eatingStage && React.createElement(EatingBoard, {\n      squares: this.state.squares,\n      onClick: e => this.sendSushi(),\n      placed: this.props.placed,\n      lastBidding: this.state.lastBidding,\n      eatOwn: e => this.eatOwnSushi(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/Johan/fugu/src/Game.js"],"names":["React","Board","EatingBoard","Swal","throwStatement","Game","Component","constructor","props","newRound","winner","title","isRoomCreator","gameOver","fire","position","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","value","pubnub","publish","message","reset","channel","gameChannel","endGame","announceEating","player","amount","eatingStage","whoEating","bidding","announceBidding","e","lastAmount","amountEaten","ateBy","annouceWinner","bidder","success","userName","annouceFail","failed","checkForWinner","squares","possibleCombinations","i","length","a","b","c","announceWinner","counter","myMove","setState","whosTurn","state","publishBidding","whosBidding","players","indexOf","passBidding","eat","console","log","onMakeMove","sushi","occupancy","piece","parseInt","input","inputAttributes","min","bid","showChoices","inputOptions","Promise","resolve","setTimeout","true","false","allowEscapeKey","inputValidator","sushis","includes","placed","push","shift","pop","sendSushi","clicked","eatOwnSushi","s","LoosePiece","eatSushi","pieces","n","Math","floor","random","Array","fill","xScore","oScore","myTurn","lastBidding","componentDidMount","getMessage","msg","index","close","icon","render","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\nimport EatingBoard from \"./EatingBoard\";\nimport Swal from \"sweetalert2\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"\"), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false\n\n      //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n    };\n\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      if (msg.message.turn < 1000) {\n        console.log(\"vi er inne i den nye IFffen\");\n        this.turn = msg.message.turn;\n        if (this.props.players[msg.message.turn] === this.props.userName) {\n          this.myMove(msg.message.index, msg.message.piece);\n        }\n      } else if (msg.message.bidding) {\n        if (msg.message.amountEaten > 0) {\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n          console.log(\n            \"Player \" + msg.message.ateBy + \"Ate \" + msg.message.amountEaten\n          );\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n        } else if (msg.message.amountEaten === null) {\n          console.log(\"Last player passed\");\n          if (msg.message.lastAmount === this.bid) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n          } else {\n            this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n          }\n        } else {\n          console.log(\n            \"Vi er inne i elsen og denne spilleren skal begynne Ã¥ spise \" +\n              this.whosBidding\n          );\n          this.setState({\n            bidding: true\n          });\n        }\n\n        console.log(\"LETS START BIDDING!\");\n      } else if (msg.message.eatingStage) {\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      } else if (msg.message.clicked && this.state.lastBidding) {\n        this.eatSushi(msg.message.sushi);\n      }\n\n      // Start a new round\n      else if (msg.message.reset) {\n        this.setState({\n          squares: Array(9).fill(\"\"),\n          whosTurn: this.props.myTurn\n        });\n\n        this.turn = 0;\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close();\n      } else if (msg.message.failed) {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Oops...\",\n          text:\n            \"The attempt failed. The atempting player will loose a random sushi.\"\n        });\n      } else if (msg.message.success) {\n        Swal.fire({\n          icon: \"success\",\n          title: \"Wohooo!\",\n          text:\n            \"The attempt was a success. The atempting player will receive one point!.\"\n        });\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  newRound = winner => {\n    let title = winner === null ? \"Tie game!\" : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    if (this.props.isRoomCreator === false && this.gameOver) {\n      Swal.fire({\n        position: \"top\",\n        allowOutsideClick: false,\n        title: title,\n        text: \"Waiting for a new round...\",\n        confirmButtonColor: \"rgb(208,33,41)\",\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: \"title-class\",\n          popup: \"popup-class\",\n          confirmButton: \"button-class\"\n        }\n      });\n      this.turn = 0; // Set turn to 1 so Player 2 can't make a move\n    }\n\n    // Show this to the room creator\n    else if (this.props.isRoomCreator && this.gameOver) {\n      Swal.fire({\n        position: \"top\",\n        allowOutsideClick: false,\n        title: title,\n        text: \"Continue Playing?\",\n        showCancelButton: true,\n        confirmButtonColor: \"rgb(208,33,41)\",\n        cancelButtonColor: \"#aaa\",\n        cancelButtonText: \"Nope\",\n        confirmButtonText: \"Yea!\",\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: \"title-class\",\n          popup: \"popup-class\",\n          confirmButton: \"button-class\",\n          cancelButton: \"button-class\"\n        }\n      }).then(result => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        } else {\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      });\n    }\n  };\n  announceEating = (player, amount) => {\n    this.props.pubnub.publish({\n      message: {\n        eatingStage: true,\n        whoEating: player,\n        amount: amount,\n        bidding: false\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  announceBidding = (e, player, lastAmount) => {\n    //tell other players the game is moving into the bidding phase\n    this.props.pubnub.publish({\n      message: {\n        bidding: true,\n        amountEaten: e,\n        ateBy: player,\n        lastAmount: lastAmount\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  annouceWinner = bidder => {\n    this.props.pubnub.publish({\n      message: {\n        success: true,\n        userName: this.props.userName\n      },\n      channel: this.props.gameChannel\n    });\n  };\n  annouceFail = bidder => {\n    this.props.pubnub.publish({\n      message: {\n        failed: true,\n        userName: this.props.userName\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  checkForWinner = squares => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter++;\n    // The board is filled up and there is no winner\n    if (this.counter === 9) {\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n\n  // Opponent's move is annpunced\n  myMove = e => {\n    //this.turn = this.turn === 1 ? 2 : 1;\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n  };\n\n  publishBidding = (e, player) => {\n    //Setter whos bidding til neste som skal spise\n    this.whosBidding =\n      player + 1 === this.props.players.length ? 0 : player + 1;\n    if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n      if (this.state.passBidding) {\n        this.announceBidding(null, this.whosBidding, e);\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n      } else {\n        this.eat(e, this.whosBidding);\n      }\n    } else {\n      console.log(\"Noen andre skal spise akkuratt nÃ¥\");\n    }\n  };\n\n  onMakeMove = sushi => {\n    //const placed = this.props.placed;\n    console.log(\"We are about to make a move\");\n\n    // Check if the square is empty and if it's the player's turn to make a move\n\n    //squares[index] = this.props.piece;\n\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n    console.log(\"now this player is making a move\" + this.turn);\n    console.log(\"the total capacity is\" + this.props.occupancy);\n\n    // Other player's turn to make a move\n    this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n    console.log(\n      \" next move will be made by player \" + this.props.players[this.turn]\n    );\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        piece: this.props.piece,\n        turn: this.turn\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"We made a move\");\n\n    //Check if there is a winner\n    //this.checkForWinner(squares);\n  };\n  eat = (e, player) => {\n    const a = parseInt(e) + 1;\n    Swal.fire({\n      title: \"How many pieces do you think you can eat?\",\n      input: \"number\",\n      showCancelButton: true,\n      cancelButtonText: \"Pass\",\n      cancelButtonColor: \"Orange\",\n      inputAttributes: {\n        min: a\n      },\n      confirmButtonText: \"Eat\",\n      allowOutsideClick: false\n    }).then(result => {\n      if (result.value) {\n        console.log(\"DU mener du kan spise \" + result.value);\n        this.bid = result.value;\n        this.announceBidding(result.value, player);\n      } else {\n        this.setState({\n          passBidding: true,\n          bidding: false\n        });\n        console.log(\"Du har passet\");\n        this.announceBidding(null, player, e);\n      }\n    });\n  };\n\n  showChoices = e => {\n    (async () => {\n      /* inputOptions can be an object or Promise */\n      const inputOptions = new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            true: \"Normal sushi\",\n            false: \"Fugu sushi\",\n            eat: \"Start bidding!\"\n          });\n        }, 1000);\n      });\n\n      const { value: sushi } = await Swal.fire({\n        title: \"What sushi would you like to place?\",\n        input: \"radio\",\n        inputOptions: inputOptions,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        confirmButtonText: \"Place sushi\",\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to choose something!\";\n          } else {\n            if (value === \"true\" && !this.props.sushis.includes(true)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n\n            if (value === \"false\" && !this.props.sushis.includes(false)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n          }\n        }\n      });\n\n      if (sushi) {\n        if (sushi === \"eat\") {\n          this.whosBidding = this.turn;\n          this.announceBidding(0);\n          this.setState({\n            bidding: true\n          });\n          this.eat(0, this.whosBidding);\n        } else {\n          if (sushi === \"true\") {\n            this.props.placed.push(true);\n            this.props.sushis.shift();\n            console.log(\"this is what you have placed \" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.sushis);\n          }\n          if (sushi === \"false\") {\n            this.props.placed.push(false);\n            this.props.sushis.pop();\n            console.log(\"this is what you have placed\" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.players);\n          }\n          this.onMakeMove(sushi);\n          //Swal.fire({ html: `you selected ${sushi}` });\n          console.log(this.state.placed);\n          console.log(this.state.sushis);\n        }\n      }\n    })();\n  };\n  //If their screen is clicked they send a sushi to the last bidder.\n  sendSushi = e => {\n    this.props.pubnub.publish({\n      message: {\n        clicked: true,\n        sushi: this.props.placed.pop()\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"Sushi har blitt sendt\");\n  };\n  //Eats all their own sushi at once. Fails bid if not enough sushis.\n  eatOwnSushi = placed => {\n    while (this.props.placed.length > 0) {\n      const s = this.props.placed.pop();\n      if (!s) {\n        this.annouceFail();\n        this.LoosePiece();\n        break;\n      } else {\n        this.bid -= 1;\n        if (this.bid === 0) {\n          this.annouceWinner(); // Needs to be implemented\n          break;\n        }\n      }\n    }\n    console.log(\"Vi er ferdig meg while lÃ¸kken\");\n    console.log(this.bid);\n  };\n\n  eatSushi = sushi => {\n    console.log(\"NÃ¥ skal vi spise en sushi\");\n    if (!sushi) {\n      this.annouceFail(); //This person has failed the attempt and looses a piece.\n      this.LoosePiece();\n    } else if (sushi) {\n      this.bid -= 1;\n      console.log(\"Vi har trukket fra en sushi\");\n      console.log(this.bid);\n      if (this.bid === 0) {\n        console.log(\"Vi er inne i vinner iffen\");\n        this.announceWinner();\n      }\n    }\n  };\n\n  LoosePiece = e => {\n    //Denne funker ikke fordi sushis arrayen mister innhold nÃ¥r de gÃ¥r over til placed.\n    if (this.props.pieces.includes(false)) {\n      const n = Math.floor(Math.random() * this.props.pieces.length);\n      if (n === 1) {\n        this.props.pieces.pop();\n        console.log(\"Du mistet en fugu sushi\");\n      } else {\n        this.props.pieces.shift();\n        console.log(\"Du mistet en vanlig sushi\");\n      }\n    } else {\n      this.props.pieces.pop();\n      console.log(\n        \"Du mistet en valig sushi siden du ikke har noen fuhuer igjen\"\n      );\n    }\n  };\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        {!this.state.eatingStage && (\n          <div className=\"board\">\n            <Board\n              squares={this.state.squares}\n              //onClick={index => this.onMakeMove(index)}\n              placed={this.props.placed}\n            />\n            <div id=\"functions\">\n              <p className=\"status-info\">{status}</p>\n              <button\n                className=\"move-button\"\n                disabled={!this.state.whosTurn}\n                onClick={e => this.showChoices()}\n                hidden={\n                  this.state.bidding ||\n                  this.state.passBidding ||\n                  this.state.eatingStage\n                }\n              >\n                {\" \"}\n                Make move\n              </button>\n            </div>\n          </div>\n        )}\n        {this.state.eatingStage && (\n          <EatingBoard\n            squares={this.state.squares}\n            onClick={e => this.sendSushi()}\n            placed={this.props.placed}\n            lastBidding={this.state.lastBidding}\n            eatOwn={e => this.eatOwnSushi()}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}