{"ast":null,"code":"import _slicedToArray from \"/Users/Johan/fugu/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Johan/fugu/src/Game.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport Swal from \"sweetalert2\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {\n      let title = winner === null ? \"Tie game!\" : \"Player \".concat(winner, \" won!\"); // Show this if the player is not the room creator\n\n      if (this.props.isRoomCreator === false && this.gameOver) {\n        Swal.fire({\n          position: \"top\",\n          allowOutsideClick: false,\n          title: title,\n          text: \"Waiting for a new round...\",\n          confirmButtonColor: \"rgb(208,33,41)\",\n          width: 275,\n          customClass: {\n            heightAuto: false,\n            title: \"title-class\",\n            popup: \"popup-class\",\n            confirmButton: \"button-class\"\n          }\n        });\n        this.turn = 1; // Set turn to 1 so Player 2 can't make a move\n      } // Show this to the room creator\n      else if (this.props.isRoomCreator && this.gameOver) {\n          Swal.fire({\n            position: \"top\",\n            allowOutsideClick: false,\n            title: title,\n            text: \"Continue Playing?\",\n            showCancelButton: true,\n            confirmButtonColor: \"rgb(208,33,41)\",\n            cancelButtonColor: \"#aaa\",\n            cancelButtonText: \"Nope\",\n            confirmButtonText: \"Yea!\",\n            width: 275,\n            customClass: {\n              heightAuto: false,\n              title: \"title-class\",\n              popup: \"popup-class\",\n              confirmButton: \"button-class\",\n              cancelButton: \"button-class\"\n            }\n          }).then(result => {\n            // Start a new round\n            if (result.value) {\n              this.props.pubnub.publish({\n                message: {\n                  reset: true\n                },\n                channel: this.props.gameChannel\n              });\n            } else {\n              // End the game\n              this.props.pubnub.publish({\n                message: {\n                  endGame: true\n                },\n                channel: this.props.gameChannel\n              });\n            }\n          });\n        }\n    };\n\n    this.announceEating = e => {\n      //tell other players the game is moving into the eating phase\n      this.props.pubnub.publish({\n        message: {\n          eating: true,\n          turn: this.turn,\n          amountEaten: e\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.announceWinner = winner => {\n      let pieces = {\n        X: this.state.xScore,\n        O: this.state.oScore\n      };\n\n      if (winner === \"X\") {\n        pieces[\"X\"] += 1;\n        this.setState({\n          xScore: pieces[\"X\"]\n        });\n      } else {\n        pieces[\"O\"] += 1;\n        this.setState({\n          oScore: pieces[\"O\"]\n        });\n      } // End the game once there is a winner\n\n\n      this.gameOver = true;\n      this.newRound(winner);\n    };\n\n    this.checkForWinner = squares => {\n      // Possible winning combinations\n      const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\n        const _possibleCombinations = _slicedToArray(possibleCombinations[i], 3),\n              a = _possibleCombinations[0],\n              b = _possibleCombinations[1],\n              c = _possibleCombinations[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          this.announceWinner(squares[a]);\n          return;\n        }\n      } // Check if the game ends in a draw\n\n\n      this.counter++; // The board is filled up and there is no winner\n\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.newRound(null);\n      }\n    };\n\n    this.publishMove = e => {\n      this.turn = this.turn === 1 ? 2 : 1;\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n    };\n\n    this.publishEating = e => {\n      this.turn = this.turn === 1 ? 2 : 1;\n      this.setState({\n        eating: true\n      });\n\n      if (this.turn === this.props.piece) {\n        this.eat();\n      }\n    };\n\n    this.onMakeMove = sushi => {\n      //const placed = this.props.placed;\n      console.log(\"We are about to make a move\"); // Check if the square is empty and if it's the player's turn to make a move\n      //squares[index] = this.props.piece;\n\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n      console.log(\"now this player is making a move\" + this.turn);\n      console.log(\"the total capacity is\" + this.props.occupancy); // Other player's turn to make a move\n\n      this.turn = this.turn === 1 ? 2 : 1;\n      console.log(\" next move will be made by player \" + this.turn); // Publish move to the channel\n\n      this.props.pubnub.publish({\n        message: {\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"We made a move\"); //Check if there is a winner\n      //this.checkForWinner(squares);\n    };\n\n    this.eat = e => {\n      console.log(\"Nå skulle vi liksom spist\");\n      const amount = Swal.fire({\n        title: \"How many pieces do you think you can eat?\",\n        input: \"number\",\n        inputAttributes: {\n          min: e\n        },\n        confirmButtonText: \"Send\",\n        allowOutsideClick: false\n      });\n    };\n\n    this.showChoices = e => {\n      (async () => {\n        /* inputOptions can be an object or Promise */\n        const inputOptions = new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              true: \"Normal sushi\",\n              false: \"Fugu sushi\",\n              eat: \"Start eating!\"\n            });\n          }, 1000);\n        });\n\n        const _ref = await Swal.fire({\n          title: \"What sushi would you like to place?\",\n          input: \"radio\",\n          inputOptions: inputOptions,\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n          confirmButtonText: \"Place sushi\",\n          inputValidator: value => {\n            if (!value) {\n              return \"You need to choose something!\";\n            } else {\n              if (value === \"true\" && !this.props.sushis.includes(true)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n\n              if (value === \"false\" && !this.props.sushis.includes(false)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n            }\n          }\n        }),\n              sushi = _ref.value;\n\n        if (sushi) {\n          if (sushi === \"eat\") {\n            this.announceEating(0);\n            this.setState({\n              eating: true\n            });\n            this.eat(1);\n          } else {\n            if (sushi === \"true\") {\n              this.props.placed.push(true);\n              this.props.sushis.shift();\n              console.log(\"this is what you have placed \" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.sushis);\n            }\n\n            if (sushi === \"false\") {\n              this.props.placed.push(false);\n              this.props.sushis.pop();\n              console.log(\"this is what you have placed\" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.sushis);\n            }\n\n            this.onMakeMove(sushi); //Swal.fire({ html: `you selected ${sushi}` });\n\n            console.log(this.state.placed);\n            console.log(this.state.sushis);\n          }\n        }\n      })();\n    };\n\n    this.state = {\n      squares: Array(9).fill(\"\"),\n      // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      eating: false //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n\n    };\n    this.turn = 1;\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      // Publish move to the opponent's board\n      if (msg.message.turn === this.props.piece) {\n        this.publishMove(msg.message.index, msg.message.piece);\n      } else if (msg.message.eating) {\n        if (msg.message.amountEaten > 0) {\n          console.log(\"Vi er inne i iffen og publishEating blir snart kjørt\");\n          this.publishEating(msg.message.amountEaten);\n        } else {\n          console.log(\"Vi er inne i elsen og inputen tl amount er  \" + msg.message.amountEaten);\n          this.setState({\n            eating: true\n          });\n        }\n\n        console.log(\"LETS START EATING!\");\n      } // Start a new round\n      else if (msg.message.reset) {\n          this.setState({\n            squares: Array(9).fill(\"\"),\n            whosTurn: this.props.myTurn\n          });\n          this.turn = 1;\n          this.gameOver = false;\n          this.counter = 0;\n          Swal.close();\n        } // End the game and go back to the lobby\n        else if (msg.message.endGame) {\n            Swal.close();\n            this.props.endGame();\n          }\n    });\n  }\n\n  render() {\n    let status; // Change to current player's turn\n\n    status = \"\".concat(this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\");\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"eating-title\",\n      hidden: !this.state.eating,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"How many sushis can you eat?\"), React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: index => this.onMakeMove(index),\n      placed: this.placed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      className: \"move-button\",\n      disabled: !this.state.whosTurn,\n      onClick: e => this.showChoices(),\n      hidden: this.state.eating,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \" \", \"Make move\")), React.createElement(\"div\", {\n      className: \"scores-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"Player X: \", this.state.xScore, \" \")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"Player O: \", this.state.oScore, \" \"))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/Johan/fugu/src/Game.js"],"names":["React","Board","Swal","Game","Component","constructor","props","newRound","winner","title","isRoomCreator","gameOver","fire","position","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","value","pubnub","publish","message","reset","channel","gameChannel","endGame","announceEating","e","eating","amountEaten","announceWinner","pieces","X","state","xScore","O","oScore","setState","checkForWinner","squares","possibleCombinations","i","length","a","b","c","counter","publishMove","whosTurn","publishEating","piece","eat","onMakeMove","sushi","console","log","occupancy","amount","input","inputAttributes","min","showChoices","inputOptions","Promise","resolve","setTimeout","true","false","allowEscapeKey","inputValidator","sushis","includes","placed","push","shift","pop","Array","fill","myTurn","componentDidMount","getMessage","msg","index","close","render","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\nimport Swal from \"sweetalert2\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"\"), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      eating: false\n\n      //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n    };\n\n    this.turn = 1;\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      // Publish move to the opponent's board\n      if (msg.message.turn === this.props.piece) {\n        this.publishMove(msg.message.index, msg.message.piece);\n      } else if (msg.message.eating) {\n        if (msg.message.amountEaten > 0) {\n          console.log(\"Vi er inne i iffen og publishEating blir snart kjørt\");\n          this.publishEating(msg.message.amountEaten);\n        } else {\n          console.log(\n            \"Vi er inne i elsen og inputen tl amount er  \" +\n              msg.message.amountEaten\n          );\n          this.setState({\n            eating: true\n          });\n        }\n\n        console.log(\"LETS START EATING!\");\n      }\n\n      // Start a new round\n      else if (msg.message.reset) {\n        this.setState({\n          squares: Array(9).fill(\"\"),\n          whosTurn: this.props.myTurn\n        });\n\n        this.turn = 1;\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close();\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  newRound = winner => {\n    let title = winner === null ? \"Tie game!\" : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    if (this.props.isRoomCreator === false && this.gameOver) {\n      Swal.fire({\n        position: \"top\",\n        allowOutsideClick: false,\n        title: title,\n        text: \"Waiting for a new round...\",\n        confirmButtonColor: \"rgb(208,33,41)\",\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: \"title-class\",\n          popup: \"popup-class\",\n          confirmButton: \"button-class\"\n        }\n      });\n      this.turn = 1; // Set turn to 1 so Player 2 can't make a move\n    }\n\n    // Show this to the room creator\n    else if (this.props.isRoomCreator && this.gameOver) {\n      Swal.fire({\n        position: \"top\",\n        allowOutsideClick: false,\n        title: title,\n        text: \"Continue Playing?\",\n        showCancelButton: true,\n        confirmButtonColor: \"rgb(208,33,41)\",\n        cancelButtonColor: \"#aaa\",\n        cancelButtonText: \"Nope\",\n        confirmButtonText: \"Yea!\",\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: \"title-class\",\n          popup: \"popup-class\",\n          confirmButton: \"button-class\",\n          cancelButton: \"button-class\"\n        }\n      }).then(result => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        } else {\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      });\n    }\n  };\n\n  announceEating = e => {\n    //tell other players the game is moving into the eating phase\n    this.props.pubnub.publish({\n      message: {\n        eating: true,\n        turn: this.turn,\n        amountEaten: e\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  // Update score for the winner\n  announceWinner = winner => {\n    let pieces = {\n      X: this.state.xScore,\n      O: this.state.oScore\n    };\n\n    if (winner === \"X\") {\n      pieces[\"X\"] += 1;\n      this.setState({\n        xScore: pieces[\"X\"]\n      });\n    } else {\n      pieces[\"O\"] += 1;\n      this.setState({\n        oScore: pieces[\"O\"]\n      });\n    }\n    // End the game once there is a winner\n    this.gameOver = true;\n    this.newRound(winner);\n  };\n\n  checkForWinner = squares => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter++;\n    // The board is filled up and there is no winner\n    if (this.counter === 9) {\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n\n  // Opponent's move is annpunced\n  publishMove = e => {\n    this.turn = this.turn === 1 ? 2 : 1;\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n  };\n\n  publishEating = e => {\n    this.turn = this.turn === 1 ? 2 : 1;\n    this.setState({\n      eating: true\n    });\n    if (this.turn === this.props.piece) {\n      this.eat();\n    }\n  };\n\n  onMakeMove = sushi => {\n    //const placed = this.props.placed;\n    console.log(\"We are about to make a move\");\n\n    // Check if the square is empty and if it's the player's turn to make a move\n\n    //squares[index] = this.props.piece;\n\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n    console.log(\"now this player is making a move\" + this.turn);\n    console.log(\"the total capacity is\" + this.props.occupancy);\n\n    // Other player's turn to make a move\n    this.turn = this.turn === 1 ? 2 : 1;\n    console.log(\" next move will be made by player \" + this.turn);\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        piece: this.props.piece,\n        turn: this.turn\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"We made a move\");\n\n    //Check if there is a winner\n    //this.checkForWinner(squares);\n  };\n  eat = e => {\n    console.log(\"Nå skulle vi liksom spist\");\n    const amount = Swal.fire({\n      title: \"How many pieces do you think you can eat?\",\n      input: \"number\",\n      inputAttributes: {\n        min: e\n      },\n      confirmButtonText: \"Send\",\n      allowOutsideClick: false\n    });\n  };\n\n  showChoices = e => {\n    (async () => {\n      /* inputOptions can be an object or Promise */\n      const inputOptions = new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            true: \"Normal sushi\",\n            false: \"Fugu sushi\",\n            eat: \"Start eating!\"\n          });\n        }, 1000);\n      });\n\n      const { value: sushi } = await Swal.fire({\n        title: \"What sushi would you like to place?\",\n        input: \"radio\",\n        inputOptions: inputOptions,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        confirmButtonText: \"Place sushi\",\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to choose something!\";\n          } else {\n            if (value === \"true\" && !this.props.sushis.includes(true)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n\n            if (value === \"false\" && !this.props.sushis.includes(false)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n          }\n        }\n      });\n\n      if (sushi) {\n        if (sushi === \"eat\") {\n          this.announceEating(0);\n          this.setState({\n            eating: true\n          });\n          this.eat(1);\n        } else {\n          if (sushi === \"true\") {\n            this.props.placed.push(true);\n            this.props.sushis.shift();\n            console.log(\"this is what you have placed \" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.sushis);\n          }\n          if (sushi === \"false\") {\n            this.props.placed.push(false);\n            this.props.sushis.pop();\n            console.log(\"this is what you have placed\" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.sushis);\n          }\n          this.onMakeMove(sushi);\n          //Swal.fire({ html: `you selected ${sushi}` });\n          console.log(this.state.placed);\n          console.log(this.state.sushis);\n        }\n      }\n    })();\n  };\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <h1 className=\"eating-title\" hidden={!this.state.eating}>\n            How many sushis can you eat?\n          </h1>\n          <Board\n            squares={this.state.squares}\n            onClick={index => this.onMakeMove(index)}\n            placed={this.placed}\n          />\n          <p className=\"status-info\">{status}</p>\n          <button\n            className=\"move-button\"\n            disabled={!this.state.whosTurn}\n            onClick={e => this.showChoices()}\n            hidden={this.state.eating}\n          >\n            {\" \"}\n            Make move\n          </button>\n        </div>\n\n        <div className=\"scores-container\">\n          <div>\n            <p>Player X: {this.state.xScore} </p>\n          </div>\n\n          <div>\n            <p>Player O: {this.state.oScore} </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}