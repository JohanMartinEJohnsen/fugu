{"ast":null,"code":"import _slicedToArray from \"/Users/Johan/fugu/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Johan/fugu/src/Game.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport EatingBoard from \"./EatingBoard\";\nimport Swal from \"sweetalert2\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = e => {\n      if (this.state.lastBidding) {\n        this.setState({\n          bidding: false,\n          passBidding: false,\n          lastBidding: false,\n          eatingStage: false\n        });\n      } else {}\n    };\n\n    this.announceEating = (player, amount) => {\n      this.props.pubnub.publish({\n        message: {\n          eatingStage: true,\n          whoEating: player,\n          amount: amount,\n          bidding: false\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.announceBidding = (e, player, lastAmount) => {\n      //tell other players the game is moving into the bidding phase\n      this.props.pubnub.publish({\n        message: {\n          bidding: true,\n          amountEaten: e,\n          ateBy: player,\n          lastAmount: lastAmount\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.annouceWinner = bidder => {\n      this.props.pubnub.publish({\n        message: {\n          success: true,\n          userName: this.props.userName\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.annouceFail = bidder => {\n      this.props.pubnub.publish({\n        message: {\n          failed: true,\n          userName: this.props.userName\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.checkForWinner = squares => {\n      // Possible winning combinations\n      const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\n        const _possibleCombinations = _slicedToArray(possibleCombinations[i], 3),\n              a = _possibleCombinations[0],\n              b = _possibleCombinations[1],\n              c = _possibleCombinations[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          this.announceWinner(squares[a]);\n          return;\n        }\n      } // Check if the game ends in a draw\n\n\n      this.counter++; // The board is filled up and there is no winner\n\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.newRound(null);\n      }\n    };\n\n    this.myMove = e => {\n      //this.turn = this.turn === 1 ? 2 : 1;\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n    };\n\n    this.publishBidding = (e, player) => {\n      //Setter whos bidding til neste som skal spise\n      this.whosBidding = player + 1 === this.props.players.length ? 0 : player + 1;\n\n      if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n        if (this.state.passBidding) {\n          this.announceBidding(null, this.whosBidding, e);\n          this.setState({\n            whosTurn: !this.state.whosTurn\n          });\n        } else {\n          this.eat(e, this.whosBidding);\n        }\n      } else {\n        console.log(\"Noen andre skal spise akkuratt nå\");\n      }\n    };\n\n    this.onMakeMove = sushi => {\n      //const placed = this.props.placed;\n      console.log(\"We are about to make a move\"); // Check if the square is empty and if it's the player's turn to make a move\n      //squares[index] = this.props.piece;\n\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n      console.log(\"now this player is making a move\" + this.turn);\n      console.log(\"the total capacity is\" + this.props.occupancy); // Other player's turn to make a move\n\n      this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n      console.log(\" next move will be made by player \" + this.props.players[this.turn]); // Publish move to the channel\n\n      this.props.pubnub.publish({\n        message: {\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"We made a move\"); //Check if there is a winner\n      //this.checkForWinner(squares);\n    };\n\n    this.eat = (e, player) => {\n      const a = parseInt(e) + 1;\n      Swal.fire({\n        title: \"How many pieces do you think you can eat?\",\n        input: \"number\",\n        showCancelButton: true,\n        cancelButtonText: \"Pass\",\n        cancelButtonColor: \"Orange\",\n        inputAttributes: {\n          min: a\n        },\n        confirmButtonText: \"Eat\",\n        allowOutsideClick: false\n      }).then(result => {\n        if (result.value) {\n          console.log(\"DU mener du kan spise \" + result.value);\n          this.bid = result.value;\n          this.announceBidding(result.value, player);\n        } else {\n          this.setState({\n            passBidding: true,\n            bidding: false\n          });\n          console.log(\"Du har passet\");\n          this.announceBidding(null, player, e);\n        }\n      });\n    };\n\n    this.showChoices = e => {\n      (async () => {\n        /* inputOptions can be an object or Promise */\n        const inputOptions = new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              true: \"Normal sushi\",\n              false: \"Fugu sushi\",\n              eat: \"Start bidding!\"\n            });\n          }, 1000);\n        });\n\n        const _ref = await Swal.fire({\n          title: \"What sushi would you like to place?\",\n          input: \"radio\",\n          inputOptions: inputOptions,\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n          confirmButtonText: \"Place sushi\",\n          inputValidator: value => {\n            if (!value) {\n              return \"You need to choose something!\";\n            } else {\n              if (value === \"true\" && !this.props.sushis.includes(true)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n\n              if (value === \"false\" && !this.props.sushis.includes(false)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n            }\n          }\n        }),\n              sushi = _ref.value;\n\n        if (sushi) {\n          if (sushi === \"eat\") {\n            this.whosBidding = this.turn;\n            this.announceBidding(0);\n            this.setState({\n              bidding: true\n            });\n            this.eat(0, this.whosBidding);\n          } else {\n            if (sushi === \"true\") {\n              this.props.placed.push(true);\n              this.props.sushis.shift();\n              console.log(\"this is what you have placed \" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.sushis);\n            }\n\n            if (sushi === \"false\") {\n              this.props.placed.push(false);\n              this.props.sushis.pop();\n              console.log(\"this is what you have placed\" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.players);\n            }\n\n            this.onMakeMove(sushi); //Swal.fire({ html: `you selected ${sushi}` });\n\n            console.log(this.state.placed);\n            console.log(this.state.sushis);\n          }\n        }\n      })();\n    };\n\n    this.sendSushi = e => {\n      this.props.pubnub.publish({\n        message: {\n          clicked: true,\n          sushi: this.props.placed.pop()\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"Sushi har blitt sendt\");\n    };\n\n    this.eatOwnSushi = placed => {\n      while (this.props.placed.length > 0) {\n        const s = this.props.placed.pop();\n\n        if (!s) {\n          this.annouceFail();\n          this.LoosePiece();\n          break;\n        } else {\n          this.bid -= 1;\n\n          if (this.bid === 0) {\n            this.annouceWinner(); // Needs to be implemented\n\n            break;\n          }\n        }\n      }\n\n      console.log(\"Vi er ferdig meg while løkken\");\n      console.log(this.bid);\n    };\n\n    this.eatSushi = sushi => {\n      console.log(\"Nå skal vi spise en sushi\");\n\n      if (!sushi) {\n        this.annouceFail(); //This person has failed the attempt and looses a piece.\n\n        this.LoosePiece();\n      } else if (sushi) {\n        this.bid -= 1;\n        console.log(\"Vi har trukket fra en sushi\");\n        console.log(this.bid);\n\n        if (this.bid === 0) {\n          console.log(\"Vi er inne i vinner iffen\");\n          this.annouceWinner(); // Needs to be implemented\n        }\n      }\n    };\n\n    this.LoosePiece = e => {\n      //Denne funker ikke fordi sushis arrayen mister innhold når de går over til placed.\n      if (this.props.pieces.includes(false)) {\n        const n = Math.floor(Math.random() * this.props.pieces.length);\n\n        if (n === 1) {\n          this.props.pieces.pop();\n          console.log(\"Du mistet en fugu sushi\");\n        } else {\n          this.props.pieces.shift();\n          console.log(\"Du mistet en vanlig sushi\");\n        }\n      } else {\n        this.props.pieces.pop();\n        console.log(\"Du mistet en valig sushi siden du ikke har noen fuhuer igjen\");\n      }\n    };\n\n    this.state = {\n      squares: Array(9).fill(\"\"),\n      // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n\n    };\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      if (msg.message.turn < 1000) {\n        console.log(\"vi er inne i den nye IFffen\");\n        this.turn = msg.message.turn;\n\n        if (this.props.players[msg.message.turn] === this.props.userName) {\n          this.myMove(msg.message.index, msg.message.piece);\n        }\n      } else if (msg.message.bidding) {\n        if (msg.message.amountEaten > 0) {\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n          console.log(\"Player \" + msg.message.ateBy + \"Ate \" + msg.message.amountEaten);\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n        } else if (msg.message.amountEaten === null) {\n          console.log(\"Last player passed\");\n\n          if (msg.message.lastAmount === this.bid) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n          } else {\n            this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n          }\n        } else {\n          console.log(\"Vi er inne i elsen og denne spilleren skal begynne å spise \" + this.whosBidding);\n          this.setState({\n            bidding: true\n          });\n        }\n\n        console.log(\"LETS START BIDDING!\");\n      } else if (msg.message.eatingStage) {\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      } else if (msg.message.clicked && this.state.lastBidding) {\n        this.eatSushi(msg.message.sushi);\n      } // Start a new round\n      else if (msg.message.reset) {\n          this.setState({\n            squares: Array(9).fill(\"\"),\n            whosTurn: this.props.myTurn\n          });\n          this.turn = 0;\n          this.gameOver = false;\n          this.counter = 0;\n          Swal.close();\n        } else if (msg.message.failed) {\n          Swal.fire({\n            icon: \"error\",\n            title: \"Oops...\",\n            text: \"The attempt failed. The atempting player will loose a random sushi.\"\n          });\n          this.newRound();\n        } else if (msg.message.success) {\n          Swal.fire({\n            icon: \"success\",\n            title: \"Wohooo!\",\n            text: \"The attempt was a success. The atempting player will receive one point!.\"\n          });\n          this.newRound();\n        } // End the game and go back to the lobby\n        else if (msg.message.endGame) {\n            Swal.close();\n            this.props.endGame();\n          }\n    });\n  }\n\n  render() {\n    let status; // Change to current player's turn\n\n    status = \"\".concat(this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\");\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, !this.state.eatingStage && React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: this.state.squares //onClick={index => this.onMakeMove(index)}\n      ,\n      placed: this.props.placed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"functions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      className: \"move-button\",\n      disabled: !this.state.whosTurn,\n      onClick: e => this.showChoices(),\n      hidden: this.state.bidding || this.state.passBidding || this.state.eatingStage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \" \", \"Make move\"))), this.state.eatingStage && React.createElement(EatingBoard, {\n      squares: this.state.squares,\n      onClick: e => this.sendSushi(),\n      placed: this.props.placed,\n      lastBidding: this.state.lastBidding,\n      eatOwn: e => this.eatOwnSushi(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/Johan/fugu/src/Game.js"],"names":["React","Board","EatingBoard","Swal","throwStatement","Game","Component","constructor","props","newRound","e","state","lastBidding","setState","bidding","passBidding","eatingStage","announceEating","player","amount","pubnub","publish","message","whoEating","channel","gameChannel","announceBidding","lastAmount","amountEaten","ateBy","annouceWinner","bidder","success","userName","annouceFail","failed","checkForWinner","squares","possibleCombinations","i","length","a","b","c","announceWinner","counter","gameOver","myMove","whosTurn","publishBidding","whosBidding","players","indexOf","eat","console","log","onMakeMove","sushi","turn","occupancy","piece","parseInt","fire","title","input","showCancelButton","cancelButtonText","cancelButtonColor","inputAttributes","min","confirmButtonText","allowOutsideClick","then","result","value","bid","showChoices","inputOptions","Promise","resolve","setTimeout","true","false","allowEscapeKey","inputValidator","sushis","includes","placed","push","shift","pop","sendSushi","clicked","eatOwnSushi","s","LoosePiece","eatSushi","pieces","n","Math","floor","random","Array","fill","xScore","oScore","myTurn","componentDidMount","getMessage","msg","index","reset","close","icon","text","endGame","render","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\nimport EatingBoard from \"./EatingBoard\";\nimport Swal from \"sweetalert2\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"\"), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false\n\n      //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n    };\n\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      if (msg.message.turn < 1000) {\n        console.log(\"vi er inne i den nye IFffen\");\n        this.turn = msg.message.turn;\n        if (this.props.players[msg.message.turn] === this.props.userName) {\n          this.myMove(msg.message.index, msg.message.piece);\n        }\n      } else if (msg.message.bidding) {\n        if (msg.message.amountEaten > 0) {\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n          console.log(\n            \"Player \" + msg.message.ateBy + \"Ate \" + msg.message.amountEaten\n          );\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n        } else if (msg.message.amountEaten === null) {\n          console.log(\"Last player passed\");\n          if (msg.message.lastAmount === this.bid) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n          } else {\n            this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n          }\n        } else {\n          console.log(\n            \"Vi er inne i elsen og denne spilleren skal begynne å spise \" +\n              this.whosBidding\n          );\n          this.setState({\n            bidding: true\n          });\n        }\n\n        console.log(\"LETS START BIDDING!\");\n      } else if (msg.message.eatingStage) {\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      } else if (msg.message.clicked && this.state.lastBidding) {\n        this.eatSushi(msg.message.sushi);\n      }\n\n      // Start a new round\n      else if (msg.message.reset) {\n        this.setState({\n          squares: Array(9).fill(\"\"),\n          whosTurn: this.props.myTurn\n        });\n\n        this.turn = 0;\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close();\n      } else if (msg.message.failed) {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Oops...\",\n          text:\n            \"The attempt failed. The atempting player will loose a random sushi.\"\n        });\n        this.newRound();\n      } else if (msg.message.success) {\n        Swal.fire({\n          icon: \"success\",\n          title: \"Wohooo!\",\n          text:\n            \"The attempt was a success. The atempting player will receive one point!.\"\n        });\n        this.newRound();\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n  newRound = e => {\n    if (this.state.lastBidding) {\n      this.setState({\n        bidding: false,\n        passBidding: false,\n        lastBidding: false,\n        eatingStage: false\n      });\n    } else {\n    }\n  };\n  announceEating = (player, amount) => {\n    this.props.pubnub.publish({\n      message: {\n        eatingStage: true,\n        whoEating: player,\n        amount: amount,\n        bidding: false\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  announceBidding = (e, player, lastAmount) => {\n    //tell other players the game is moving into the bidding phase\n    this.props.pubnub.publish({\n      message: {\n        bidding: true,\n        amountEaten: e,\n        ateBy: player,\n        lastAmount: lastAmount\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  annouceWinner = bidder => {\n    this.props.pubnub.publish({\n      message: {\n        success: true,\n        userName: this.props.userName\n      },\n      channel: this.props.gameChannel\n    });\n  };\n  annouceFail = bidder => {\n    this.props.pubnub.publish({\n      message: {\n        failed: true,\n        userName: this.props.userName\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  checkForWinner = squares => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter++;\n    // The board is filled up and there is no winner\n    if (this.counter === 9) {\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n\n  // Opponent's move is annpunced\n  myMove = e => {\n    //this.turn = this.turn === 1 ? 2 : 1;\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n  };\n\n  publishBidding = (e, player) => {\n    //Setter whos bidding til neste som skal spise\n    this.whosBidding =\n      player + 1 === this.props.players.length ? 0 : player + 1;\n    if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n      if (this.state.passBidding) {\n        this.announceBidding(null, this.whosBidding, e);\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n      } else {\n        this.eat(e, this.whosBidding);\n      }\n    } else {\n      console.log(\"Noen andre skal spise akkuratt nå\");\n    }\n  };\n\n  onMakeMove = sushi => {\n    //const placed = this.props.placed;\n    console.log(\"We are about to make a move\");\n\n    // Check if the square is empty and if it's the player's turn to make a move\n\n    //squares[index] = this.props.piece;\n\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n    console.log(\"now this player is making a move\" + this.turn);\n    console.log(\"the total capacity is\" + this.props.occupancy);\n\n    // Other player's turn to make a move\n    this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n    console.log(\n      \" next move will be made by player \" + this.props.players[this.turn]\n    );\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        piece: this.props.piece,\n        turn: this.turn\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"We made a move\");\n\n    //Check if there is a winner\n    //this.checkForWinner(squares);\n  };\n  eat = (e, player) => {\n    const a = parseInt(e) + 1;\n    Swal.fire({\n      title: \"How many pieces do you think you can eat?\",\n      input: \"number\",\n      showCancelButton: true,\n      cancelButtonText: \"Pass\",\n      cancelButtonColor: \"Orange\",\n      inputAttributes: {\n        min: a\n      },\n      confirmButtonText: \"Eat\",\n      allowOutsideClick: false\n    }).then(result => {\n      if (result.value) {\n        console.log(\"DU mener du kan spise \" + result.value);\n        this.bid = result.value;\n        this.announceBidding(result.value, player);\n      } else {\n        this.setState({\n          passBidding: true,\n          bidding: false\n        });\n        console.log(\"Du har passet\");\n        this.announceBidding(null, player, e);\n      }\n    });\n  };\n\n  showChoices = e => {\n    (async () => {\n      /* inputOptions can be an object or Promise */\n      const inputOptions = new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            true: \"Normal sushi\",\n            false: \"Fugu sushi\",\n            eat: \"Start bidding!\"\n          });\n        }, 1000);\n      });\n\n      const { value: sushi } = await Swal.fire({\n        title: \"What sushi would you like to place?\",\n        input: \"radio\",\n        inputOptions: inputOptions,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        confirmButtonText: \"Place sushi\",\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to choose something!\";\n          } else {\n            if (value === \"true\" && !this.props.sushis.includes(true)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n\n            if (value === \"false\" && !this.props.sushis.includes(false)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n          }\n        }\n      });\n\n      if (sushi) {\n        if (sushi === \"eat\") {\n          this.whosBidding = this.turn;\n          this.announceBidding(0);\n          this.setState({\n            bidding: true\n          });\n          this.eat(0, this.whosBidding);\n        } else {\n          if (sushi === \"true\") {\n            this.props.placed.push(true);\n            this.props.sushis.shift();\n            console.log(\"this is what you have placed \" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.sushis);\n          }\n          if (sushi === \"false\") {\n            this.props.placed.push(false);\n            this.props.sushis.pop();\n            console.log(\"this is what you have placed\" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.players);\n          }\n          this.onMakeMove(sushi);\n          //Swal.fire({ html: `you selected ${sushi}` });\n          console.log(this.state.placed);\n          console.log(this.state.sushis);\n        }\n      }\n    })();\n  };\n  //If their screen is clicked they send a sushi to the last bidder.\n  sendSushi = e => {\n    this.props.pubnub.publish({\n      message: {\n        clicked: true,\n        sushi: this.props.placed.pop()\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"Sushi har blitt sendt\");\n  };\n  //Eats all their own sushi at once. Fails bid if not enough sushis.\n  eatOwnSushi = placed => {\n    while (this.props.placed.length > 0) {\n      const s = this.props.placed.pop();\n      if (!s) {\n        this.annouceFail();\n        this.LoosePiece();\n        break;\n      } else {\n        this.bid -= 1;\n        if (this.bid === 0) {\n          this.annouceWinner(); // Needs to be implemented\n          break;\n        }\n      }\n    }\n    console.log(\"Vi er ferdig meg while løkken\");\n    console.log(this.bid);\n  };\n\n  eatSushi = sushi => {\n    console.log(\"Nå skal vi spise en sushi\");\n    if (!sushi) {\n      this.annouceFail(); //This person has failed the attempt and looses a piece.\n      this.LoosePiece();\n    } else if (sushi) {\n      this.bid -= 1;\n      console.log(\"Vi har trukket fra en sushi\");\n      console.log(this.bid);\n      if (this.bid === 0) {\n        console.log(\"Vi er inne i vinner iffen\");\n        this.annouceWinner(); // Needs to be implemented\n      }\n    }\n  };\n\n  LoosePiece = e => {\n    //Denne funker ikke fordi sushis arrayen mister innhold når de går over til placed.\n    if (this.props.pieces.includes(false)) {\n      const n = Math.floor(Math.random() * this.props.pieces.length);\n      if (n === 1) {\n        this.props.pieces.pop();\n        console.log(\"Du mistet en fugu sushi\");\n      } else {\n        this.props.pieces.shift();\n        console.log(\"Du mistet en vanlig sushi\");\n      }\n    } else {\n      this.props.pieces.pop();\n      console.log(\n        \"Du mistet en valig sushi siden du ikke har noen fuhuer igjen\"\n      );\n    }\n  };\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        {!this.state.eatingStage && (\n          <div className=\"board\">\n            <Board\n              squares={this.state.squares}\n              //onClick={index => this.onMakeMove(index)}\n              placed={this.props.placed}\n            />\n            <div id=\"functions\">\n              <p className=\"status-info\">{status}</p>\n              <button\n                className=\"move-button\"\n                disabled={!this.state.whosTurn}\n                onClick={e => this.showChoices()}\n                hidden={\n                  this.state.bidding ||\n                  this.state.passBidding ||\n                  this.state.eatingStage\n                }\n              >\n                {\" \"}\n                Make move\n              </button>\n            </div>\n          </div>\n        )}\n        {this.state.eatingStage && (\n          <EatingBoard\n            squares={this.state.squares}\n            onClick={e => this.sendSushi()}\n            placed={this.props.placed}\n            lastBidding={this.state.lastBidding}\n            eatOwn={e => this.eatOwnSushi()}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}