{"ast":null,"code":"var _jsxFileName = \"/Users/Johan/fugu/src/App.js\";\nimport React, { Component } from \"react\";\nimport Game from \"./Game\"; //import Board from \"./Board\";\n\nimport PubNubReact from \"pubnub-react\";\nimport Swal from \"sweetalert2\";\nimport shortid from \"shortid\";\nimport \"./Game.css\"; //import { placeholder } from \"@babel/types\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onPressCreate = e => {\n      // Create a random name for the channel\n      this.roomId = shortid.generate().substring(0, 5);\n      this.lobbyChannel = \"fugulobby--\" + this.roomId; //this.userName = \"Johan\";\n      //this.players.push(\"Johan\");\n\n      this.pubnub.subscribe({\n        channels: [this.lobbyChannel],\n        withPresence: true\n      }); // Open the modal\n\n      Swal.mixin({\n        allowOutsideClick: false,\n        progressSteps: [\"1\", \"2\"],\n        // Custom CSS\n        customClass: {\n          heightAuto: false,\n          title: \"title-class\",\n          popup: \"popup-class\",\n          confirmButton: \"button-class\"\n        }\n      }).queue([{\n        title: \"Share this room ID with your friend\",\n        text: this.roomId\n      }, {\n        title: \"Enter your username\",\n        input: \"text\"\n      }]).then(result => {\n        const answer = JSON.stringify(result.value[1]);\n        const editedAnswer = answer.substring(1, answer.length - 1);\n        console.log(answer);\n        this.userName = answer;\n        this.players.push(answer);\n      });\n      this.setState({\n        piece: 1,\n        sushis: [true, true, true, false],\n        isRoomCreator: true,\n        isDisabled: true,\n        // Disable the 'Create' button\n        myTurn: true // Room creator makes the 1st move\n\n      });\n    };\n\n    this.onPressJoin = e => {\n      Swal.mixin({\n        input: \"text\",\n        confirmButtonText: \"Next &rarr;\",\n        showCancelButton: true,\n        progressSteps: [\"1\", \"2\"]\n      }).queue([{\n        title: \"Game Pin\",\n        text: \"Enter the 5 characters that is unique for your game\"\n      }, {\n        title: \"Username\",\n        text: \"Enter the username you would like to be called \"\n      }]).then(result => {\n        if (result.value) {\n          const answers = JSON.stringify(result.value);\n          Swal.fire({\n            title: \"All done!\",\n            html: \"\\n            Your answers:\\n            <pre><code>\".concat(answers, \"</code></pre>\\n          \"),\n            confirmButtonText: \"Lovely!\"\n          });\n          this.userName = result.value[1];\n          this.joinRoom(result.value[0], result.value[1]);\n        }\n      });\n    };\n\n    this.getNumberInChannel = e => {\n      console.log(this.players);\n    };\n\n    this.joinRoom = (value, username) => {\n      this.roomId = value;\n      this.lobbyChannel = \"fugulobby--\" + this.roomId; // Check the number of people in the channel\n\n      this.pubnub.hereNow({\n        channels: [this.lobbyChannel]\n      }).then(response => {\n        if (response.totalOccupancy < 200) {\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          this.setState({\n            piece: response.totalOccupancy + 1,\n            sushis: [true, true, true, false]\n          });\n          console.log(\"Joined game as player \" + this.state.piece);\n          this.pubnub.publish({\n            message: {\n              newPlayer: true,\n              userName: username\n            },\n            channel: this.lobbyChannel\n          });\n        } else {\n          // Game in progress\n          Swal.fire({\n            position: \"top\",\n            allowOutsideClick: false,\n            title: \"Error\",\n            text: \"Game in progress. Try another room.\",\n            width: 275,\n            padding: \"0.7em\",\n            customClass: {\n              heightAuto: false,\n              title: \"title-class\",\n              popup: \"popup-class\",\n              confirmButton: \"button-class\"\n            }\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.startGame = e => {\n      this.pubnub.publish({\n        message: {\n          gameStarted: true,\n          players: this.players\n        },\n        channel: this.lobbyChannel\n      });\n    };\n\n    this.endGame = () => {\n      this.setState({\n        piece: \"\",\n        isPlaying: false,\n        isRoomCreator: false,\n        isDisabled: false,\n        myTurn: false\n      });\n      this.lobbyChannel = null;\n      this.gameChannel = null;\n      this.roomId = null;\n      this.pubnub.unsubscribe({\n        channels: [this.lobbyChannel, this.gameChannel]\n      });\n    };\n\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-fae6dfb9-0fd1-4b5e-a0f3-a3d4511085e9\",\n      subscribeKey: \"sub-c-0b5e637c-3675-11eb-b6eb-96faa39b9528\"\n    });\n    this.state = {\n      piece: \"\",\n      sushis: [],\n      placed: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false\n    };\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n    this.userName = null;\n    this.players = [];\n    this.pieces = [true, true, true, false];\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  }\n\n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, msg => {\n        if (msg.message.newPlayer) {\n          this.players.push(msg.message.userName);\n        } // Start the game once an opponent joins the channel\n\n\n        if (msg.message.gameStarted) {\n          // Create a different channel for the game\n          this.gameChannel = \"fuguegame--\" + this.roomId;\n          this.players = msg.message.players;\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n          this.setState({\n            isPlaying: true\n          }); // Close the modals if they are opened\n\n          Swal.close();\n          console.log(this.state.sushis);\n          /*\n          (async () => {\n            const inputOptions = new Promise(resolve => {\n              setTimeout(() => {\n                resolve({\n                  true: \"Normal sushi\",\n                  false: \"Fugu sushi\"\n                });\n              }, 1000);\n            });\n             const { value: sushi } = await Swal.fire({\n              title: \"Choose your first move\",\n              input: \"radio\",\n              inputOptions: inputOptions,\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              confirmButtonText: \"Place sushi\",\n              inputValidator: value => {\n                if (!value) {\n                  return \"You need to choose something!\";\n                } else {\n                  if (value === \"true\" && !this.state.sushis.includes(true)) {\n                    return \"You do not have enough of this type of sushi!\";\n                  }\n                  if (value === \"false\" && !this.state.sushis.includes(false)) {\n                    return \"You do not have enough of this type of sushi!\";\n                  }\n                }\n              }\n            });\n             if (sushi) {\n              if (sushi === \"true\") {\n                this.state.placed.push(true);\n                this.state.sushis.shift();\n              }\n              if (sushi === \"false\") {\n                this.state.placed.push(false);\n                this.state.sushis.pop();\n              }\n              Swal.fire({ html: `you selected ${sushi}` });\n              console.log(this.state.placed);\n              console.log(this.state.sushis);\n            }\n          })();\n           */\n        }\n      });\n    }\n  } // Create a room channel\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"backGround-Brown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"\\xA1FUGU!\")), React.createElement(\"div\", {\n      className: \"gamePin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), !this.state.isPlaying && React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Gamepin: \", this.roomId, \" \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \" Velkommen \", this.userName), React.createElement(\"img\", {\n      src: \"https://i.imgur.com/y1DXfJk.png\",\n      alt: \"Welcome to FUGU\",\n      widt: \"30px\",\n      heigh: \"30px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"create-button \",\n      disabled: this.state.isDisabled,\n      onClick: e => this.onPressCreate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \" \", \"Create\"), React.createElement(\"button\", {\n      className: \"join-button\",\n      onClick: e => this.onPressJoin(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \" \", \"Join\"), React.createElement(\"button\", {\n      className: \"start-button\",\n      hidden: !this.state.isRoomCreator,\n      onClick: e => this.startGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \" \", \"Start\"))), this.state.isPlaying && React.createElement(Game, {\n      pubnub: this.pubnub,\n      gameChannel: this.gameChannel,\n      piece: this.state.piece,\n      isRoomCreator: this.state.isRoomCreator,\n      myTurn: this.state.myTurn,\n      xUsername: this.state.xUsername,\n      oUsername: this.state.oUsername,\n      endGame: this.endGame,\n      placed: this.state.placed,\n      sushis: this.state.sushis,\n      occupancy: this.players.length,\n      players: this.players,\n      userName: this.userName,\n      pieces: this.pieces,\n      isPlaying: this.isPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Johan/fugu/src/App.js"],"names":["React","Component","Game","PubNubReact","Swal","shortid","App","constructor","props","onPressCreate","e","roomId","generate","substring","lobbyChannel","pubnub","subscribe","channels","withPresence","mixin","allowOutsideClick","progressSteps","customClass","heightAuto","title","popup","confirmButton","queue","text","input","then","result","answer","JSON","stringify","value","editedAnswer","length","console","log","userName","players","push","setState","piece","sushis","isRoomCreator","isDisabled","myTurn","onPressJoin","confirmButtonText","showCancelButton","answers","fire","html","joinRoom","getNumberInChannel","username","hereNow","response","totalOccupancy","state","publish","message","newPlayer","channel","position","width","padding","catch","error","startGame","gameStarted","endGame","isPlaying","gameChannel","unsubscribe","publishKey","subscribeKey","placed","init","pieces","componentWillUnmount","componentDidUpdate","getMessage","msg","close","render","xUsername","oUsername"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Game from \"./Game\";\n//import Board from \"./Board\";\nimport PubNubReact from \"pubnub-react\";\nimport Swal from \"sweetalert2\";\nimport shortid from \"shortid\";\nimport \"./Game.css\";\n//import { placeholder } from \"@babel/types\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-fae6dfb9-0fd1-4b5e-a0f3-a3d4511085e9\",\n      subscribeKey: \"sub-c-0b5e637c-3675-11eb-b6eb-96faa39b9528\"\n    });\n\n    this.state = {\n      piece: \"\",\n      sushis: [],\n      placed: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false\n    };\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n    this.userName = null;\n    this.players = [];\n    this.pieces = [true, true, true, false];\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  }\n\n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, msg => {\n        if (msg.message.newPlayer) {\n          this.players.push(msg.message.userName);\n        }\n        // Start the game once an opponent joins the channel\n        if (msg.message.gameStarted) {\n          // Create a different channel for the game\n          this.gameChannel = \"fuguegame--\" + this.roomId;\n          this.players = msg.message.players;\n\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n\n          this.setState({\n            isPlaying: true\n          });\n\n          // Close the modals if they are opened\n          Swal.close();\n          console.log(this.state.sushis);\n          /*\n          (async () => {\n            const inputOptions = new Promise(resolve => {\n              setTimeout(() => {\n                resolve({\n                  true: \"Normal sushi\",\n                  false: \"Fugu sushi\"\n                });\n              }, 1000);\n            });\n\n            const { value: sushi } = await Swal.fire({\n              title: \"Choose your first move\",\n              input: \"radio\",\n              inputOptions: inputOptions,\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              confirmButtonText: \"Place sushi\",\n              inputValidator: value => {\n                if (!value) {\n                  return \"You need to choose something!\";\n                } else {\n                  if (value === \"true\" && !this.state.sushis.includes(true)) {\n                    return \"You do not have enough of this type of sushi!\";\n                  }\n                  if (value === \"false\" && !this.state.sushis.includes(false)) {\n                    return \"You do not have enough of this type of sushi!\";\n                  }\n                }\n              }\n            });\n\n            if (sushi) {\n              if (sushi === \"true\") {\n                this.state.placed.push(true);\n                this.state.sushis.shift();\n              }\n              if (sushi === \"false\") {\n                this.state.placed.push(false);\n                this.state.sushis.pop();\n              }\n              Swal.fire({ html: `you selected ${sushi}` });\n              console.log(this.state.placed);\n              console.log(this.state.sushis);\n            }\n          })();\n\n          */\n        }\n      });\n    }\n  }\n\n  // Create a room channel\n  onPressCreate = e => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0, 5);\n    this.lobbyChannel = \"fugulobby--\" + this.roomId;\n    //this.userName = \"Johan\";\n    //this.players.push(\"Johan\");\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    // Open the modal\n    Swal.mixin({\n      allowOutsideClick: false,\n\n      progressSteps: [\"1\", \"2\"],\n      // Custom CSS\n      customClass: {\n        heightAuto: false,\n        title: \"title-class\",\n        popup: \"popup-class\",\n        confirmButton: \"button-class\"\n      }\n    })\n      .queue([\n        { title: \"Share this room ID with your friend\", text: this.roomId },\n        { title: \"Enter your username\", input: \"text\" }\n      ])\n      .then(result => {\n        const answer = JSON.stringify(result.value[1]);\n        const editedAnswer = answer.substring(1, answer.length - 1);\n        console.log(answer);\n        this.userName = answer;\n        this.players.push(answer);\n      });\n\n    this.setState({\n      piece: 1,\n      sushis: [true, true, true, false],\n      isRoomCreator: true,\n      isDisabled: true, // Disable the 'Create' button\n      myTurn: true // Room creator makes the 1st move\n    });\n  };\n\n  // The 'Join' button was pressed\n  onPressJoin = e => {\n    Swal.mixin({\n      input: \"text\",\n      confirmButtonText: \"Next &rarr;\",\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\"]\n    })\n      .queue([\n        {\n          title: \"Game Pin\",\n          text: \"Enter the 5 characters that is unique for your game\"\n        },\n        {\n          title: \"Username\",\n          text: \"Enter the username you would like to be called \"\n        }\n      ])\n      .then(result => {\n        if (result.value) {\n          const answers = JSON.stringify(result.value);\n          Swal.fire({\n            title: \"All done!\",\n            html: `\n            Your answers:\n            <pre><code>${answers}</code></pre>\n          `,\n            confirmButtonText: \"Lovely!\"\n          });\n          this.userName = result.value[1];\n          this.joinRoom(result.value[0], result.value[1]);\n        }\n      });\n  };\n  getNumberInChannel = e => {\n    console.log(this.players);\n  };\n\n  // Join a room channel\n  joinRoom = (value, username) => {\n    this.roomId = value;\n    this.lobbyChannel = \"fugulobby--\" + this.roomId;\n\n    // Check the number of people in the channel\n    this.pubnub\n      .hereNow({\n        channels: [this.lobbyChannel]\n      })\n      .then(response => {\n        if (response.totalOccupancy < 200) {\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n\n          this.setState({\n            piece: response.totalOccupancy + 1,\n            sushis: [true, true, true, false]\n          });\n\n          console.log(\"Joined game as player \" + this.state.piece);\n\n          this.pubnub.publish({\n            message: {\n              newPlayer: true,\n              userName: username\n            },\n            channel: this.lobbyChannel\n          });\n        } else {\n          // Game in progress\n          Swal.fire({\n            position: \"top\",\n            allowOutsideClick: false,\n            title: \"Error\",\n            text: \"Game in progress. Try another room.\",\n            width: 275,\n            padding: \"0.7em\",\n            customClass: {\n              heightAuto: false,\n              title: \"title-class\",\n              popup: \"popup-class\",\n              confirmButton: \"button-class\"\n            }\n          });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  startGame = e => {\n    this.pubnub.publish({\n      message: {\n        gameStarted: true,\n        players: this.players\n      },\n      channel: this.lobbyChannel\n    });\n  };\n\n  // Reset everything\n  endGame = () => {\n    this.setState({\n      piece: \"\",\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false\n    });\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;\n\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"backGround-Brown\">\n        <div className=\"title\">\n          <p>¡FUGU!</p>\n        </div>\n        <div className=\"gamePin\"></div>\n\n        {!this.state.isPlaying && (\n          <div className=\"game\">\n            <p>Gamepin: {this.roomId} </p>\n            <p> Velkommen {this.userName}</p>\n            <img\n              src=\"https://i.imgur.com/y1DXfJk.png\"\n              alt=\"Welcome to FUGU\"\n              widt=\"30px\"\n              heigh=\"30px\"\n            />\n            <div className=\"button-container\">\n              <button\n                className=\"create-button \"\n                disabled={this.state.isDisabled}\n                onClick={e => this.onPressCreate()}\n              >\n                {\" \"}\n                Create\n              </button>\n              <button className=\"join-button\" onClick={e => this.onPressJoin()}>\n                {\" \"}\n                Join\n              </button>\n              <button\n                className=\"start-button\"\n                hidden={!this.state.isRoomCreator}\n                onClick={e => this.startGame()}\n              >\n                {\" \"}\n                Start\n              </button>\n            </div>\n          </div>\n        )}\n\n        {this.state.isPlaying && (\n          <Game\n            pubnub={this.pubnub}\n            gameChannel={this.gameChannel}\n            piece={this.state.piece}\n            isRoomCreator={this.state.isRoomCreator}\n            myTurn={this.state.myTurn}\n            xUsername={this.state.xUsername}\n            oUsername={this.state.oUsername}\n            endGame={this.endGame}\n            placed={this.state.placed}\n            sushis={this.state.sushis}\n            occupancy={this.players.length}\n            players={this.players}\n            userName={this.userName}\n            pieces={this.pieces}\n            isPlaying={this.isPlaying}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}