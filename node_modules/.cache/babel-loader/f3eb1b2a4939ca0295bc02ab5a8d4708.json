{"ast":null,"code":"var _jsxFileName = \"/Users/Johan/fugu/src/Game.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport EatingBoard from \"./EatingBoard\";\nimport Swal from \"sweetalert2\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = player => {\n      console.log(\"NEW ROUND BLIR KJØRT\");\n\n      if (this.state.lastBidding) {\n        //Makes the one who bidded highest last round start\n        this.setState({\n          whosTurn: true,\n          bidding: false,\n          passBidding: false,\n          lastBidding: false,\n          eatingStage: false,\n          placed: []\n        });\n        this.bid = 0;\n        this.turn = this.props.players.indexOf(this.props.userName);\n        this.whosBidding = null;\n        this.passedPlayers = [];\n      } else {\n        // Resets for everyone else\n        console.log(\"nullstiller for ikke høyeste budgiver\");\n        this.setState({\n          whosTurn: false,\n          bidding: false,\n          passBidding: false,\n          lastBidding: false,\n          eatingStage: false,\n          placed: []\n        });\n        this.turn = this.props.players.indexOf(player);\n        this.bid = 0;\n        this.whosBidding = null;\n        this.passedPlayers = [];\n      }\n    };\n\n    this.announceEating = (player, amount) => {\n      this.props.pubnub.publish({\n        message: {\n          eatingStage: true,\n          whoEating: player,\n          amount: amount,\n          bidding: false\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.announceBidding = (e, player, lastAmount) => {\n      //tell other players the game is moving into the bidding phase\n      this.props.pubnub.publish({\n        message: {\n          bidding: true,\n          amountBidden: e,\n          ateBy: player,\n          lastAmount: lastAmount\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.annouceWinner = bidder => {\n      console.log(\"Announce winner\");\n      this.props.pubnub.publish({\n        message: {\n          success: true,\n          userName: this.props.userName,\n          reset: true\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.annouceFail = bidder => {\n      this.props.pubnub.publish({\n        message: {\n          failed: true,\n          userName: this.props.userName,\n          reset: true\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.myMove = e => {\n      //this.turn = this.turn === 1 ? 2 : 1;\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n    };\n\n    this.publishBidding = (e, player) => {\n      //Setter whos bidding til neste som skal spise\n      this.whosBidding = player + 1 === this.props.players.length ? 0 : player + 1;\n\n      if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n        if (this.state.passBidding) {\n          this.setState({\n            whosTurn: !this.state.whosTurn\n          });\n          this.announceBidding(null, this.whosBidding, e);\n          this.setState({\n            whosTurn: !this.state.whosTurn\n          });\n        } else {\n          this.setState({\n            whosTurn: true\n          });\n          this.makeBid(e, this.whosBidding);\n        }\n      } else {\n        console.log(\"Noen andre skal spise akkuratt nå\");\n      }\n    };\n\n    this.onMakeMove = sushi => {\n      console.log(\"We are about to make a move\"); // Check if the square is empty and if it's the player's turn to make a move\n      //squares[index] = this.props.piece;\n\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n      console.log(\"now this player is making a move\" + this.turn);\n      console.log(\"the total capacity is\" + this.props.occupancy); // Other player's turn to make a move\n\n      this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n      console.log(\" next move will be made by player \" + this.props.players[this.turn]); // Publish move to the channel\n\n      this.props.pubnub.publish({\n        message: {\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"We made a move\"); //Check if there is a winner\n      //this.checkForWinner(squares);\n    };\n\n    this.makeBid = (e, player) => {\n      if (this.state.lastBidding) {\n        return;\n      }\n\n      const a = parseInt(e) + 1;\n      console.log(\"The last amount you bid was\" + this.bid);\n      Swal.fire({\n        title: \"How many pieces do you think you can eat?\",\n        input: \"number\",\n        showCancelButton: true,\n        cancelButtonText: \"Pass\",\n        cancelButtonColor: \"Orange\",\n        inputAttributes: {\n          min: a\n        },\n        confirmButtonText: \"Bid\",\n        allowOutsideClick: false\n      }).then(result => {\n        if (result.value) {\n          console.log(\"DU mener du kan spise \" + result.value);\n          this.bid = result.value;\n          this.setState({\n            whosTurn: !this.state.whosTurn\n          });\n          this.announceBidding(result.value, player);\n        } else {\n          this.setState({\n            passBidding: true,\n            bidding: false\n          });\n          console.log(\"Du har passet\");\n          this.setState({\n            whosTurn: !this.state.whosTurn\n          });\n          this.announceBidding(null, player, e);\n        }\n      });\n    };\n\n    this.showChoices = e => {\n      if (this.state.length === 0) {\n        this.sushis = this.placed;\n      }\n\n      (async () => {\n        /* inputOptions can be an object or Promise */\n        const inputOptions = new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              true: \"Normal sushi\",\n              false: \"Fugu sushi\",\n              eat: \"Start bidding!\"\n            });\n          }, 1000);\n        });\n\n        const _ref = await Swal.fire({\n          title: \"What sushi would you like to place?\",\n          input: \"radio\",\n          inputOptions: inputOptions,\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n          confirmButtonText: \"Place sushi\",\n          inputValidator: value => {\n            if (!value) {\n              return \"You need to choose something!\";\n            } else {\n              if (value === \"true\" && !this.sushis.includes(true)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n\n              if (value === \"false\" && !this.sushis.includes(false)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n            }\n          }\n        }),\n              sushi = _ref.value;\n\n        if (sushi) {\n          if (sushi === \"eat\") {\n            this.whosBidding = this.turn;\n            this.announceBidding(0);\n            this.setState({\n              bidding: true\n            });\n            this.makeBid(0, this.whosBidding);\n          } else {\n            if (sushi === \"true\") {\n              this.state.placed.push(true);\n              this.sushis.shift();\n              console.log(\"this is what you have placed \" + this.state.placed);\n              console.log(\"And this is what you have left \" + this.sushis);\n            }\n\n            if (sushi === \"false\") {\n              this.state.placed.push(false);\n              this.sushis.pop();\n              console.log(\"this is what you have placed\" + this.state.placed);\n              console.log(\"And this is what you have left \" + this.props.players);\n            }\n\n            this.onMakeMove(sushi);\n            console.log(this.state.placed);\n            console.log(this.sushis);\n          }\n        }\n      })();\n    };\n\n    this.sendSushi = e => {\n      this.props.pubnub.publish({\n        message: {\n          clicked: true,\n          sushi: this.state.placed.pop()\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"Sushi har blitt sendt\");\n    };\n\n    this.eatOwnSushi = placed => {\n      while (this.state.placed.length > 0) {\n        const s = this.state.placed.pop();\n\n        if (!s) {\n          this.LoosePiece();\n          this.annouceFail();\n          break;\n        } else {\n          this.bid -= 1;\n\n          if (this.bid === 0) {\n            this.annouceWinner(); // Needs to be implemented\n\n            break;\n          }\n        }\n      }\n\n      console.log(\"Vi er ferdig meg while løkken\");\n      console.log(this.bid);\n    };\n\n    this.eatSushi = sushi => {\n      console.log(\"Nå skal vi spise en sushi\");\n\n      if (!sushi) {\n        this.LoosePiece();\n        this.annouceFail(); //This person has failed the attempt and looses a piece.\n      } else if (sushi) {\n        this.bid -= 1;\n        console.log(\"Vi har trukket fra en sushi\");\n        console.log(this.bid);\n\n        if (this.bid === 0) {\n          console.log(\"Vi er inne i vinner iffen\");\n          this.annouceWinner();\n        }\n      }\n    };\n\n    this.LoosePiece = e => {\n      if (this.pieces.includes(false)) {\n        const n = Math.floor(Math.random() * this.pieces.length);\n\n        if (n === 1) {\n          this.pieces.pop();\n          console.log(\"Du mistet en fugu sushi\");\n        } else {\n          this.pieces.shift();\n          console.log(\"Du mistet en vanlig sushi\");\n        }\n      } else {\n        this.pieces.pop();\n        console.log(\"Du mistet en valig sushi siden du ikke har noen fuguer igjen\");\n      }\n    };\n\n    this.state = {\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false,\n      nextRound: false,\n      placed: this.props.placed\n    };\n    this.sushis = [true, true, true, false];\n    this.pieces = [true, true, true, false];\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n    this.passedPlayers = [];\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      console.log(\"vi er inne i den nye IFffen\");\n      this.turn = msg.message.turn; //Makes it the right players turn\n\n      if (this.props.players[msg.message.turn] === this.props.userName) {\n        this.myMove(msg.message.index, msg.message.piece);\n      } //Sets the game into bidding stage\n      else if (msg.message.bidding) {\n          if (msg.message.amountBidden > 0) {\n            this.publishBidding(msg.message.amountBidden, msg.message.ateBy);\n            console.log(\"Player \" + msg.message.ateBy + \"bid \" + msg.message.amountBidden);\n            this.publishBidding(msg.message.amountBidden, msg.message.ateBy);\n          } else if (msg.message.amountBidden === null) {\n            console.log(msg.message.ateBy + \" passed\");\n\n            if (!this.passedPlayers.includes(msg.message.ateBy)) {\n              this.passedPlayers.push(msg.message.ateBy);\n            }\n\n            if (this.passedPlayers.length === this.props.players.length - 1 && !this.state.passBidding) {\n              console.log(\"du er den siste som er igjen\");\n              this.setState({\n                lastBidding: true\n              });\n              this.announceEating(this.userName, this.bid);\n              Swal.close();\n            } else {\n              this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n            }\n          } else {\n            console.log(\"Vi er inne i elsen og denne spilleren skal begynne å by \" + this.whosBidding);\n            this.setState({\n              bidding: true\n            });\n          }\n\n          console.log(\"LETS START BIDDING!\");\n        } //Sets the game into the eating stage\n        else if (msg.message.eatingStage) {\n            Swal.close();\n            this.setState({\n              eatingStage: true,\n              bidding: false\n            });\n            console.log(\"eating stage\");\n          } //Eating player recives the sushi they clicked\n          else if (msg.message.clicked && this.state.lastBidding) {\n              this.eatSushi(msg.message.sushi);\n            } //Fails the eating attempt\n            else if (msg.message.failed) {\n                Swal.fire({\n                  icon: \"error\",\n                  title: \"Oops...\",\n                  text: \"The attempt failed. The atempting player will loose a random sushi.\"\n                }).then(result => {\n                  this.newRound(msg.message.userName);\n                  console.log(\"Nå ble den trykket\");\n                });\n              } //The eating attempt is a success\n              else if (msg.message.success) {\n                  Swal.fire({\n                    icon: \"success\",\n                    title: \"Wohooo!\",\n                    confirmButtonText: \"Next Round\",\n                    text: \"The attempt was a success. The atempting player will receive one point!.\"\n                  }).then(result => {\n                    this.sushis = this.pieces;\n                    this.newRound(msg.message.userName);\n                    console.log(\"Nå ble den trykket\");\n                  });\n                  console.log(\"The bet was successfull\");\n                } // End the game and go back to the lobby\n                else if (msg.message.endGame) {\n                    Swal.close();\n                    this.props.endGame();\n                  }\n    });\n  }\n\n  render() {\n    let status; // Change to current player's turn\n\n    status = \"\".concat(this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\");\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, !this.state.eatingStage && React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: this.state.squares //onClick={index => this.onMakeMove(index)}\n      ,\n      placed: this.state.placed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"functions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      className: \"move-button\",\n      disabled: !this.state.whosTurn,\n      onClick: e => this.showChoices(),\n      hidden: this.state.bidding || this.state.passBidding || this.state.eatingStage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, \" \", \"Make move\"))), this.state.eatingStage && React.createElement(EatingBoard, {\n      squares: this.state.squares,\n      onClick: e => this.sendSushi(),\n      placed: this.state.placed,\n      lastBidding: this.state.lastBidding,\n      eatOwn: e => this.eatOwnSushi(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/Johan/fugu/src/Game.js"],"names":["React","Board","EatingBoard","Swal","throwStatement","Game","Component","constructor","props","newRound","player","console","log","state","lastBidding","setState","whosTurn","bidding","passBidding","eatingStage","placed","bid","turn","players","indexOf","userName","whosBidding","passedPlayers","announceEating","amount","pubnub","publish","message","whoEating","channel","gameChannel","announceBidding","e","lastAmount","amountBidden","ateBy","annouceWinner","bidder","success","reset","annouceFail","failed","myMove","publishBidding","length","makeBid","onMakeMove","sushi","occupancy","piece","a","parseInt","fire","title","input","showCancelButton","cancelButtonText","cancelButtonColor","inputAttributes","min","confirmButtonText","allowOutsideClick","then","result","value","showChoices","sushis","inputOptions","Promise","resolve","setTimeout","true","false","eat","allowEscapeKey","inputValidator","includes","push","shift","pop","sendSushi","clicked","eatOwnSushi","s","LoosePiece","eatSushi","pieces","n","Math","floor","random","myTurn","nextRound","gameOver","counter","componentDidMount","getMessage","msg","index","close","icon","text","endGame","render","status","squares"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\nimport EatingBoard from \"./EatingBoard\";\nimport Swal from \"sweetalert2\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false,\n      nextRound: false,\n      placed: this.props.placed\n    };\n    this.sushis = [true, true, true, false];\n    this.pieces = [true, true, true, false];\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n    this.passedPlayers = [];\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      console.log(\"vi er inne i den nye IFffen\");\n      this.turn = msg.message.turn;\n      //Makes it the right players turn\n      if (this.props.players[msg.message.turn] === this.props.userName) {\n        this.myMove(msg.message.index, msg.message.piece);\n      }\n      //Sets the game into bidding stage\n      else if (msg.message.bidding) {\n        if (msg.message.amountBidden > 0) {\n          this.publishBidding(msg.message.amountBidden, msg.message.ateBy);\n          console.log(\n            \"Player \" + msg.message.ateBy + \"bid \" + msg.message.amountBidden\n          );\n          this.publishBidding(msg.message.amountBidden, msg.message.ateBy);\n        } else if (msg.message.amountBidden === null) {\n          console.log(msg.message.ateBy + \" passed\");\n          if (!this.passedPlayers.includes(msg.message.ateBy)) {\n            this.passedPlayers.push(msg.message.ateBy);\n          }\n\n          if (\n            this.passedPlayers.length === this.props.players.length - 1 &&\n            !this.state.passBidding\n          ) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n            Swal.close();\n          } else {\n            this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n          }\n        } else {\n          console.log(\n            \"Vi er inne i elsen og denne spilleren skal begynne å by \" +\n              this.whosBidding\n          );\n          this.setState({\n            bidding: true\n          });\n        }\n        console.log(\"LETS START BIDDING!\");\n      }\n      //Sets the game into the eating stage\n      else if (msg.message.eatingStage) {\n        Swal.close();\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      }\n      //Eating player recives the sushi they clicked\n      else if (msg.message.clicked && this.state.lastBidding) {\n        this.eatSushi(msg.message.sushi);\n      }\n      //Fails the eating attempt\n      else if (msg.message.failed) {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Oops...\",\n          text:\n            \"The attempt failed. The atempting player will loose a random sushi.\"\n        }).then(result => {\n          this.newRound(msg.message.userName);\n          console.log(\"Nå ble den trykket\");\n        });\n      }\n      //The eating attempt is a success\n      else if (msg.message.success) {\n        Swal.fire({\n          icon: \"success\",\n          title: \"Wohooo!\",\n          confirmButtonText: \"Next Round\",\n          text:\n            \"The attempt was a success. The atempting player will receive one point!.\"\n        }).then(result => {\n          this.sushis = this.pieces;\n          this.newRound(msg.message.userName);\n          console.log(\"Nå ble den trykket\");\n        });\n        console.log(\"The bet was successfull\");\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n  newRound = player => {\n    console.log(\"NEW ROUND BLIR KJØRT\");\n\n    if (this.state.lastBidding) {\n      //Makes the one who bidded highest last round start\n      this.setState({\n        whosTurn: true,\n        bidding: false,\n        passBidding: false,\n        lastBidding: false,\n        eatingStage: false,\n        placed: []\n      });\n      this.bid = 0;\n      this.turn = this.props.players.indexOf(this.props.userName);\n      this.whosBidding = null;\n      this.passedPlayers = [];\n    } else {\n      // Resets for everyone else\n      console.log(\"nullstiller for ikke høyeste budgiver\");\n      this.setState({\n        whosTurn: false,\n        bidding: false,\n        passBidding: false,\n        lastBidding: false,\n        eatingStage: false,\n        placed: []\n      });\n      this.turn = this.props.players.indexOf(player);\n      this.bid = 0;\n      this.whosBidding = null;\n      this.passedPlayers = [];\n    }\n  };\n  announceEating = (player, amount) => {\n    this.props.pubnub.publish({\n      message: {\n        eatingStage: true,\n        whoEating: player,\n        amount: amount,\n        bidding: false\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  announceBidding = (e, player, lastAmount) => {\n    //tell other players the game is moving into the bidding phase\n    this.props.pubnub.publish({\n      message: {\n        bidding: true,\n        amountBidden: e,\n        ateBy: player,\n        lastAmount: lastAmount\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  annouceWinner = bidder => {\n    console.log(\"Announce winner\");\n    this.props.pubnub.publish({\n      message: {\n        success: true,\n        userName: this.props.userName,\n        reset: true\n      },\n      channel: this.props.gameChannel\n    });\n  };\n  annouceFail = bidder => {\n    this.props.pubnub.publish({\n      message: {\n        failed: true,\n        userName: this.props.userName,\n        reset: true\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  // Opponent's move is annpunced\n  myMove = e => {\n    //this.turn = this.turn === 1 ? 2 : 1;\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n  };\n\n  publishBidding = (e, player) => {\n    //Setter whos bidding til neste som skal spise\n    this.whosBidding =\n      player + 1 === this.props.players.length ? 0 : player + 1;\n    if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n      if (this.state.passBidding) {\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n        this.announceBidding(null, this.whosBidding, e);\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n      } else {\n        this.setState({\n          whosTurn: true\n        });\n        this.makeBid(e, this.whosBidding);\n      }\n    } else {\n      console.log(\"Noen andre skal spise akkuratt nå\");\n    }\n  };\n\n  onMakeMove = sushi => {\n    console.log(\"We are about to make a move\");\n\n    // Check if the square is empty and if it's the player's turn to make a move\n\n    //squares[index] = this.props.piece;\n\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n    console.log(\"now this player is making a move\" + this.turn);\n    console.log(\"the total capacity is\" + this.props.occupancy);\n\n    // Other player's turn to make a move\n    this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n    console.log(\n      \" next move will be made by player \" + this.props.players[this.turn]\n    );\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        piece: this.props.piece,\n        turn: this.turn\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"We made a move\");\n\n    //Check if there is a winner\n    //this.checkForWinner(squares);\n  };\n  makeBid = (e, player) => {\n    if (this.state.lastBidding) {\n      return;\n    }\n    const a = parseInt(e) + 1;\n    console.log(\"The last amount you bid was\" + this.bid);\n    Swal.fire({\n      title: \"How many pieces do you think you can eat?\",\n      input: \"number\",\n      showCancelButton: true,\n      cancelButtonText: \"Pass\",\n      cancelButtonColor: \"Orange\",\n      inputAttributes: {\n        min: a\n      },\n      confirmButtonText: \"Bid\",\n      allowOutsideClick: false\n    }).then(result => {\n      if (result.value) {\n        console.log(\"DU mener du kan spise \" + result.value);\n        this.bid = result.value;\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n        this.announceBidding(result.value, player);\n      } else {\n        this.setState({\n          passBidding: true,\n          bidding: false\n        });\n        console.log(\"Du har passet\");\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n        this.announceBidding(null, player, e);\n      }\n    });\n  };\n\n  showChoices = e => {\n    if (this.state.length === 0) {\n      this.sushis = this.placed;\n    }\n    (async () => {\n      /* inputOptions can be an object or Promise */\n      const inputOptions = new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            true: \"Normal sushi\",\n            false: \"Fugu sushi\",\n            eat: \"Start bidding!\"\n          });\n        }, 1000);\n      });\n\n      const { value: sushi } = await Swal.fire({\n        title: \"What sushi would you like to place?\",\n        input: \"radio\",\n        inputOptions: inputOptions,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        confirmButtonText: \"Place sushi\",\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to choose something!\";\n          } else {\n            if (value === \"true\" && !this.sushis.includes(true)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n\n            if (value === \"false\" && !this.sushis.includes(false)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n          }\n        }\n      });\n\n      if (sushi) {\n        if (sushi === \"eat\") {\n          this.whosBidding = this.turn;\n          this.announceBidding(0);\n          this.setState({\n            bidding: true\n          });\n          this.makeBid(0, this.whosBidding);\n        } else {\n          if (sushi === \"true\") {\n            this.state.placed.push(true);\n            this.sushis.shift();\n            console.log(\"this is what you have placed \" + this.state.placed);\n            console.log(\"And this is what you have left \" + this.sushis);\n          }\n          if (sushi === \"false\") {\n            this.state.placed.push(false);\n            this.sushis.pop();\n            console.log(\"this is what you have placed\" + this.state.placed);\n            console.log(\"And this is what you have left \" + this.props.players);\n          }\n          this.onMakeMove(sushi);\n          console.log(this.state.placed);\n          console.log(this.sushis);\n        }\n      }\n    })();\n  };\n  //If their screen is clicked they send a sushi to the last bidder.\n  sendSushi = e => {\n    this.props.pubnub.publish({\n      message: {\n        clicked: true,\n        sushi: this.state.placed.pop()\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"Sushi har blitt sendt\");\n  };\n  //Eats all their own sushi at once. Fails bid if not enough sushis.\n  eatOwnSushi = placed => {\n    while (this.state.placed.length > 0) {\n      const s = this.state.placed.pop();\n      if (!s) {\n        this.LoosePiece();\n        this.annouceFail();\n        break;\n      } else {\n        this.bid -= 1;\n        if (this.bid === 0) {\n          this.annouceWinner(); // Needs to be implemented\n          break;\n        }\n      }\n    }\n    console.log(\"Vi er ferdig meg while løkken\");\n    console.log(this.bid);\n  };\n\n  eatSushi = sushi => {\n    console.log(\"Nå skal vi spise en sushi\");\n    if (!sushi) {\n      this.LoosePiece();\n      this.annouceFail(); //This person has failed the attempt and looses a piece.\n    } else if (sushi) {\n      this.bid -= 1;\n      console.log(\"Vi har trukket fra en sushi\");\n      console.log(this.bid);\n      if (this.bid === 0) {\n        console.log(\"Vi er inne i vinner iffen\");\n        this.annouceWinner();\n      }\n    }\n  };\n\n  LoosePiece = e => {\n    if (this.pieces.includes(false)) {\n      const n = Math.floor(Math.random() * this.pieces.length);\n      if (n === 1) {\n        this.pieces.pop();\n        console.log(\"Du mistet en fugu sushi\");\n      } else {\n        this.pieces.shift();\n        console.log(\"Du mistet en vanlig sushi\");\n      }\n    } else {\n      this.pieces.pop();\n      console.log(\n        \"Du mistet en valig sushi siden du ikke har noen fuguer igjen\"\n      );\n    }\n  };\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        {!this.state.eatingStage && (\n          <div className=\"board\">\n            <Board\n              squares={this.state.squares}\n              //onClick={index => this.onMakeMove(index)}\n              placed={this.state.placed}\n            />\n            <div id=\"functions\">\n              <p className=\"status-info\">{status}</p>\n              <button\n                className=\"move-button\"\n                disabled={!this.state.whosTurn}\n                onClick={e => this.showChoices()}\n                hidden={\n                  this.state.bidding ||\n                  this.state.passBidding ||\n                  this.state.eatingStage\n                }\n              >\n                {\" \"}\n                Make move\n              </button>\n            </div>\n          </div>\n        )}\n        {this.state.eatingStage && (\n          <EatingBoard\n            squares={this.state.squares}\n            onClick={e => this.sendSushi()}\n            placed={this.state.placed}\n            lastBidding={this.state.lastBidding}\n            eatOwn={e => this.eatOwnSushi()}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}