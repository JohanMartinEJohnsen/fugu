{"ast":null,"code":"import _slicedToArray from \"/Users/Johan/fugu/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Johan/fugu/src/Game.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport EatingBoard from \"./EatingBoard\";\nimport Swal from \"sweetalert2\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = player => {\n      if (this.state.lastBidding) {\n        this.setState({\n          whosTurn: true,\n          bidding: false,\n          passBidding: false,\n          lastBidding: false,\n          eatingStage: false\n        });\n        this.props.placed = [];\n        this.props.sushis = this.props.pieces;\n        this.turn = this.props.players.indexOf(this.props.userName);\n      } else {\n        this.setState({\n          whosTurn: false,\n          bidding: false,\n          passBidding: false,\n          lastBidding: false,\n          eatingStage: false\n        });\n        this.props.placed = [];\n        this.props.sushis = this.props.pieces;\n        this.turn = this.props.players.indexOf(player);\n      }\n\n      this.showChoices();\n      this.console.log(\"reset...\");\n    };\n\n    this.announceEating = (player, amount) => {\n      this.props.pubnub.publish({\n        message: {\n          eatingStage: true,\n          whoEating: player,\n          amount: amount,\n          bidding: false\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.announceBidding = (e, player, lastAmount) => {\n      //tell other players the game is moving into the bidding phase\n      this.props.pubnub.publish({\n        message: {\n          bidding: true,\n          amountEaten: e,\n          ateBy: player,\n          lastAmount: lastAmount\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.annouceWinner = bidder => {\n      this.props.pubnub.publish({\n        message: {\n          success: true,\n          userName: this.props.userName\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.annouceFail = bidder => {\n      this.props.pubnub.publish({\n        message: {\n          failed: true,\n          userName: this.props.userName\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.checkForWinner = squares => {\n      // Possible winning combinations\n      const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\n        const _possibleCombinations = _slicedToArray(possibleCombinations[i], 3),\n              a = _possibleCombinations[0],\n              b = _possibleCombinations[1],\n              c = _possibleCombinations[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          this.announceWinner(squares[a]);\n          return;\n        }\n      } // Check if the game ends in a draw\n\n\n      this.counter++; // The board is filled up and there is no winner\n\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.newRound(null);\n      }\n    };\n\n    this.myMove = e => {\n      //this.turn = this.turn === 1 ? 2 : 1;\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n    };\n\n    this.publishBidding = (e, player) => {\n      //Setter whos bidding til neste som skal spise\n      this.whosBidding = player + 1 === this.props.players.length ? 0 : player + 1;\n\n      if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n        if (this.state.passBidding) {\n          this.announceBidding(null, this.whosBidding, e);\n          this.setState({\n            whosTurn: !this.state.whosTurn\n          });\n        } else {\n          this.eat(e, this.whosBidding);\n        }\n      } else {\n        console.log(\"Noen andre skal spise akkuratt nå\");\n      }\n    };\n\n    this.onMakeMove = sushi => {\n      //const placed = this.props.placed;\n      console.log(\"We are about to make a move\"); // Check if the square is empty and if it's the player's turn to make a move\n      //squares[index] = this.props.piece;\n\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n      console.log(\"now this player is making a move\" + this.turn);\n      console.log(\"the total capacity is\" + this.props.occupancy); // Other player's turn to make a move\n\n      this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n      console.log(\" next move will be made by player \" + this.props.players[this.turn]); // Publish move to the channel\n\n      this.props.pubnub.publish({\n        message: {\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"We made a move\"); //Check if there is a winner\n      //this.checkForWinner(squares);\n    };\n\n    this.eat = (e, player) => {\n      const a = parseInt(e) + 1;\n      Swal.fire({\n        title: \"How many pieces do you think you can eat?\",\n        input: \"number\",\n        showCancelButton: true,\n        cancelButtonText: \"Pass\",\n        cancelButtonColor: \"Orange\",\n        inputAttributes: {\n          min: a\n        },\n        confirmButtonText: \"Eat\",\n        allowOutsideClick: false\n      }).then(result => {\n        if (result.value) {\n          console.log(\"DU mener du kan spise \" + result.value);\n          this.bid = result.value;\n          this.announceBidding(result.value, player);\n        } else {\n          this.setState({\n            passBidding: true,\n            bidding: false\n          });\n          console.log(\"Du har passet\");\n          this.announceBidding(null, player, e);\n        }\n      });\n    };\n\n    this.showChoices = e => {\n      (async () => {\n        /* inputOptions can be an object or Promise */\n        const inputOptions = new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              true: \"Normal sushi\",\n              false: \"Fugu sushi\",\n              eat: \"Start bidding!\"\n            });\n          }, 1000);\n        });\n\n        const _ref = await Swal.fire({\n          title: \"What sushi would you like to place?\",\n          input: \"radio\",\n          inputOptions: inputOptions,\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n          confirmButtonText: \"Place sushi\",\n          inputValidator: value => {\n            if (!value) {\n              return \"You need to choose something!\";\n            } else {\n              if (value === \"true\" && !this.props.sushis.includes(true)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n\n              if (value === \"false\" && !this.props.sushis.includes(false)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n            }\n          }\n        }),\n              sushi = _ref.value;\n\n        if (sushi) {\n          if (sushi === \"eat\") {\n            this.whosBidding = this.turn;\n            this.announceBidding(0);\n            this.setState({\n              bidding: true\n            });\n            this.eat(0, this.whosBidding);\n          } else {\n            if (sushi === \"true\") {\n              this.props.placed.push(true);\n              this.props.sushis.shift();\n              console.log(\"this is what you have placed \" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.sushis);\n            }\n\n            if (sushi === \"false\") {\n              this.props.placed.push(false);\n              this.props.sushis.pop();\n              console.log(\"this is what you have placed\" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.players);\n            }\n\n            this.onMakeMove(sushi); //Swal.fire({ html: `you selected ${sushi}` });\n\n            console.log(this.state.placed);\n            console.log(this.state.sushis);\n          }\n        }\n      })();\n    };\n\n    this.sendSushi = e => {\n      this.props.pubnub.publish({\n        message: {\n          clicked: true,\n          sushi: this.props.placed.pop()\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"Sushi har blitt sendt\");\n    };\n\n    this.eatOwnSushi = placed => {\n      while (this.props.placed.length > 0) {\n        const s = this.props.placed.pop();\n\n        if (!s) {\n          this.annouceFail();\n          this.LoosePiece();\n          break;\n        } else {\n          this.bid -= 1;\n\n          if (this.bid === 0) {\n            this.annouceWinner(); // Needs to be implemented\n\n            break;\n          }\n        }\n      }\n\n      console.log(\"Vi er ferdig meg while løkken\");\n      console.log(this.bid);\n    };\n\n    this.eatSushi = sushi => {\n      console.log(\"Nå skal vi spise en sushi\");\n\n      if (!sushi) {\n        this.annouceFail(); //This person has failed the attempt and looses a piece.\n\n        this.LoosePiece();\n      } else if (sushi) {\n        this.bid -= 1;\n        console.log(\"Vi har trukket fra en sushi\");\n        console.log(this.bid);\n\n        if (this.bid === 0) {\n          console.log(\"Vi er inne i vinner iffen\");\n          this.annouceWinner(); // Needs to be implemented\n        }\n      }\n    };\n\n    this.LoosePiece = e => {\n      //Denne funker ikke fordi sushis arrayen mister innhold når de går over til placed.\n      if (this.props.pieces.includes(false)) {\n        const n = Math.floor(Math.random() * this.props.pieces.length);\n\n        if (n === 1) {\n          this.props.pieces.pop();\n          console.log(\"Du mistet en fugu sushi\");\n        } else {\n          this.props.pieces.shift();\n          console.log(\"Du mistet en vanlig sushi\");\n        }\n      } else {\n        this.props.pieces.pop();\n        console.log(\"Du mistet en valig sushi siden du ikke har noen fuhuer igjen\");\n      }\n    };\n\n    this.state = {\n      squares: Array(9).fill(\"\"),\n      // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n\n    };\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      if (msg.message.turn < 1000) {\n        console.log(\"vi er inne i den nye IFffen\");\n        this.turn = msg.message.turn;\n\n        if (this.props.players[msg.message.turn] === this.props.userName) {\n          this.myMove(msg.message.index, msg.message.piece);\n        }\n      } else if (msg.message.bidding) {\n        if (msg.message.amountEaten > 0) {\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n          console.log(\"Player \" + msg.message.ateBy + \"Ate \" + msg.message.amountEaten);\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n        } else if (msg.message.amountEaten === null) {\n          console.log(\"Last player passed\");\n\n          if (msg.message.lastAmount === this.bid) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n          } else {\n            this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n          }\n        } else {\n          console.log(\"Vi er inne i elsen og denne spilleren skal begynne å spise \" + this.whosBidding);\n          this.setState({\n            bidding: true\n          });\n        }\n\n        console.log(\"LETS START BIDDING!\");\n      } else if (msg.message.eatingStage) {\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      } else if (msg.message.clicked && this.state.lastBidding) {\n        this.eatSushi(msg.message.sushi);\n      } // Start a new round\n      else if (msg.message.reset) {\n          this.setState({\n            squares: Array(9).fill(\"\"),\n            whosTurn: this.props.myTurn\n          });\n          this.turn = 0;\n          this.gameOver = false;\n          this.counter = 0;\n          Swal.close();\n        } else if (msg.message.failed) {\n          Swal.fire({\n            icon: \"error\",\n            title: \"Oops...\",\n            text: \"The attempt failed. The atempting player will loose a random sushi.\"\n          });\n          this.newRound(msg.message.userName);\n        } else if (msg.message.success) {\n          Swal.fire({\n            icon: \"success\",\n            title: \"Wohooo!\",\n            text: \"The attempt was a success. The atempting player will receive one point!.\"\n          });\n          this.newRound(msg.message.userName);\n        } // End the game and go back to the lobby\n        else if (msg.message.endGame) {\n            Swal.close();\n            this.props.endGame();\n          }\n    });\n  }\n\n  render() {\n    let status; // Change to current player's turn\n\n    status = \"\".concat(this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\");\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, !this.state.eatingStage && React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: this.state.squares //onClick={index => this.onMakeMove(index)}\n      ,\n      placed: this.props.placed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"functions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      className: \"move-button\",\n      disabled: !this.state.whosTurn,\n      onClick: e => this.showChoices(),\n      hidden: this.state.bidding || this.state.passBidding || this.state.eatingStage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \" \", \"Make move\"))), this.state.eatingStage && React.createElement(EatingBoard, {\n      squares: this.state.squares,\n      onClick: e => this.sendSushi(),\n      placed: this.props.placed,\n      lastBidding: this.state.lastBidding,\n      eatOwn: e => this.eatOwnSushi(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/Johan/fugu/src/Game.js"],"names":["React","Board","EatingBoard","Swal","throwStatement","Game","Component","constructor","props","newRound","player","state","lastBidding","setState","whosTurn","bidding","passBidding","eatingStage","placed","sushis","pieces","turn","players","indexOf","userName","showChoices","console","log","announceEating","amount","pubnub","publish","message","whoEating","channel","gameChannel","announceBidding","e","lastAmount","amountEaten","ateBy","annouceWinner","bidder","success","annouceFail","failed","checkForWinner","squares","possibleCombinations","i","length","a","b","c","announceWinner","counter","gameOver","myMove","publishBidding","whosBidding","eat","onMakeMove","sushi","occupancy","piece","parseInt","fire","title","input","showCancelButton","cancelButtonText","cancelButtonColor","inputAttributes","min","confirmButtonText","allowOutsideClick","then","result","value","bid","inputOptions","Promise","resolve","setTimeout","true","false","allowEscapeKey","inputValidator","includes","push","shift","pop","sendSushi","clicked","eatOwnSushi","s","LoosePiece","eatSushi","n","Math","floor","random","Array","fill","xScore","oScore","myTurn","componentDidMount","getMessage","msg","index","reset","close","icon","text","endGame","render","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\nimport EatingBoard from \"./EatingBoard\";\nimport Swal from \"sweetalert2\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"\"), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false\n\n      //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n    };\n\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      if (msg.message.turn < 1000) {\n        console.log(\"vi er inne i den nye IFffen\");\n        this.turn = msg.message.turn;\n        if (this.props.players[msg.message.turn] === this.props.userName) {\n          this.myMove(msg.message.index, msg.message.piece);\n        }\n      } else if (msg.message.bidding) {\n        if (msg.message.amountEaten > 0) {\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n          console.log(\n            \"Player \" + msg.message.ateBy + \"Ate \" + msg.message.amountEaten\n          );\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n        } else if (msg.message.amountEaten === null) {\n          console.log(\"Last player passed\");\n          if (msg.message.lastAmount === this.bid) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n          } else {\n            this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n          }\n        } else {\n          console.log(\n            \"Vi er inne i elsen og denne spilleren skal begynne å spise \" +\n              this.whosBidding\n          );\n          this.setState({\n            bidding: true\n          });\n        }\n\n        console.log(\"LETS START BIDDING!\");\n      } else if (msg.message.eatingStage) {\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      } else if (msg.message.clicked && this.state.lastBidding) {\n        this.eatSushi(msg.message.sushi);\n      }\n\n      // Start a new round\n      else if (msg.message.reset) {\n        this.setState({\n          squares: Array(9).fill(\"\"),\n          whosTurn: this.props.myTurn\n        });\n\n        this.turn = 0;\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close();\n      } else if (msg.message.failed) {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Oops...\",\n          text:\n            \"The attempt failed. The atempting player will loose a random sushi.\"\n        });\n        this.newRound(msg.message.userName);\n      } else if (msg.message.success) {\n        Swal.fire({\n          icon: \"success\",\n          title: \"Wohooo!\",\n          text:\n            \"The attempt was a success. The atempting player will receive one point!.\"\n        });\n        this.newRound(msg.message.userName);\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n  newRound = player => {\n    if (this.state.lastBidding) {\n      this.setState({\n        whosTurn: true,\n        bidding: false,\n        passBidding: false,\n        lastBidding: false,\n        eatingStage: false\n      });\n      this.props.placed = [];\n      this.props.sushis = this.props.pieces;\n      this.turn = this.props.players.indexOf(this.props.userName);\n    } else {\n      this.setState({\n        whosTurn: false,\n        bidding: false,\n        passBidding: false,\n        lastBidding: false,\n        eatingStage: false\n      });\n      this.props.placed = [];\n      this.props.sushis = this.props.pieces;\n      this.turn = this.props.players.indexOf(player);\n    }\n    this.showChoices();\n    this.console.log(\"reset...\");\n  };\n  announceEating = (player, amount) => {\n    this.props.pubnub.publish({\n      message: {\n        eatingStage: true,\n        whoEating: player,\n        amount: amount,\n        bidding: false\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  announceBidding = (e, player, lastAmount) => {\n    //tell other players the game is moving into the bidding phase\n    this.props.pubnub.publish({\n      message: {\n        bidding: true,\n        amountEaten: e,\n        ateBy: player,\n        lastAmount: lastAmount\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  annouceWinner = bidder => {\n    this.props.pubnub.publish({\n      message: {\n        success: true,\n        userName: this.props.userName\n      },\n      channel: this.props.gameChannel\n    });\n  };\n  annouceFail = bidder => {\n    this.props.pubnub.publish({\n      message: {\n        failed: true,\n        userName: this.props.userName\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  checkForWinner = squares => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter++;\n    // The board is filled up and there is no winner\n    if (this.counter === 9) {\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n\n  // Opponent's move is annpunced\n  myMove = e => {\n    //this.turn = this.turn === 1 ? 2 : 1;\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n  };\n\n  publishBidding = (e, player) => {\n    //Setter whos bidding til neste som skal spise\n    this.whosBidding =\n      player + 1 === this.props.players.length ? 0 : player + 1;\n    if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n      if (this.state.passBidding) {\n        this.announceBidding(null, this.whosBidding, e);\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n      } else {\n        this.eat(e, this.whosBidding);\n      }\n    } else {\n      console.log(\"Noen andre skal spise akkuratt nå\");\n    }\n  };\n\n  onMakeMove = sushi => {\n    //const placed = this.props.placed;\n    console.log(\"We are about to make a move\");\n\n    // Check if the square is empty and if it's the player's turn to make a move\n\n    //squares[index] = this.props.piece;\n\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n    console.log(\"now this player is making a move\" + this.turn);\n    console.log(\"the total capacity is\" + this.props.occupancy);\n\n    // Other player's turn to make a move\n    this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n    console.log(\n      \" next move will be made by player \" + this.props.players[this.turn]\n    );\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        piece: this.props.piece,\n        turn: this.turn\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"We made a move\");\n\n    //Check if there is a winner\n    //this.checkForWinner(squares);\n  };\n  eat = (e, player) => {\n    const a = parseInt(e) + 1;\n    Swal.fire({\n      title: \"How many pieces do you think you can eat?\",\n      input: \"number\",\n      showCancelButton: true,\n      cancelButtonText: \"Pass\",\n      cancelButtonColor: \"Orange\",\n      inputAttributes: {\n        min: a\n      },\n      confirmButtonText: \"Eat\",\n      allowOutsideClick: false\n    }).then(result => {\n      if (result.value) {\n        console.log(\"DU mener du kan spise \" + result.value);\n        this.bid = result.value;\n        this.announceBidding(result.value, player);\n      } else {\n        this.setState({\n          passBidding: true,\n          bidding: false\n        });\n        console.log(\"Du har passet\");\n        this.announceBidding(null, player, e);\n      }\n    });\n  };\n\n  showChoices = e => {\n    (async () => {\n      /* inputOptions can be an object or Promise */\n      const inputOptions = new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            true: \"Normal sushi\",\n            false: \"Fugu sushi\",\n            eat: \"Start bidding!\"\n          });\n        }, 1000);\n      });\n\n      const { value: sushi } = await Swal.fire({\n        title: \"What sushi would you like to place?\",\n        input: \"radio\",\n        inputOptions: inputOptions,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        confirmButtonText: \"Place sushi\",\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to choose something!\";\n          } else {\n            if (value === \"true\" && !this.props.sushis.includes(true)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n\n            if (value === \"false\" && !this.props.sushis.includes(false)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n          }\n        }\n      });\n\n      if (sushi) {\n        if (sushi === \"eat\") {\n          this.whosBidding = this.turn;\n          this.announceBidding(0);\n          this.setState({\n            bidding: true\n          });\n          this.eat(0, this.whosBidding);\n        } else {\n          if (sushi === \"true\") {\n            this.props.placed.push(true);\n            this.props.sushis.shift();\n            console.log(\"this is what you have placed \" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.sushis);\n          }\n          if (sushi === \"false\") {\n            this.props.placed.push(false);\n            this.props.sushis.pop();\n            console.log(\"this is what you have placed\" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.players);\n          }\n          this.onMakeMove(sushi);\n          //Swal.fire({ html: `you selected ${sushi}` });\n          console.log(this.state.placed);\n          console.log(this.state.sushis);\n        }\n      }\n    })();\n  };\n  //If their screen is clicked they send a sushi to the last bidder.\n  sendSushi = e => {\n    this.props.pubnub.publish({\n      message: {\n        clicked: true,\n        sushi: this.props.placed.pop()\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"Sushi har blitt sendt\");\n  };\n  //Eats all their own sushi at once. Fails bid if not enough sushis.\n  eatOwnSushi = placed => {\n    while (this.props.placed.length > 0) {\n      const s = this.props.placed.pop();\n      if (!s) {\n        this.annouceFail();\n        this.LoosePiece();\n        break;\n      } else {\n        this.bid -= 1;\n        if (this.bid === 0) {\n          this.annouceWinner(); // Needs to be implemented\n          break;\n        }\n      }\n    }\n    console.log(\"Vi er ferdig meg while løkken\");\n    console.log(this.bid);\n  };\n\n  eatSushi = sushi => {\n    console.log(\"Nå skal vi spise en sushi\");\n    if (!sushi) {\n      this.annouceFail(); //This person has failed the attempt and looses a piece.\n      this.LoosePiece();\n    } else if (sushi) {\n      this.bid -= 1;\n      console.log(\"Vi har trukket fra en sushi\");\n      console.log(this.bid);\n      if (this.bid === 0) {\n        console.log(\"Vi er inne i vinner iffen\");\n        this.annouceWinner(); // Needs to be implemented\n      }\n    }\n  };\n\n  LoosePiece = e => {\n    //Denne funker ikke fordi sushis arrayen mister innhold når de går over til placed.\n    if (this.props.pieces.includes(false)) {\n      const n = Math.floor(Math.random() * this.props.pieces.length);\n      if (n === 1) {\n        this.props.pieces.pop();\n        console.log(\"Du mistet en fugu sushi\");\n      } else {\n        this.props.pieces.shift();\n        console.log(\"Du mistet en vanlig sushi\");\n      }\n    } else {\n      this.props.pieces.pop();\n      console.log(\n        \"Du mistet en valig sushi siden du ikke har noen fuhuer igjen\"\n      );\n    }\n  };\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        {!this.state.eatingStage && (\n          <div className=\"board\">\n            <Board\n              squares={this.state.squares}\n              //onClick={index => this.onMakeMove(index)}\n              placed={this.props.placed}\n            />\n            <div id=\"functions\">\n              <p className=\"status-info\">{status}</p>\n              <button\n                className=\"move-button\"\n                disabled={!this.state.whosTurn}\n                onClick={e => this.showChoices()}\n                hidden={\n                  this.state.bidding ||\n                  this.state.passBidding ||\n                  this.state.eatingStage\n                }\n              >\n                {\" \"}\n                Make move\n              </button>\n            </div>\n          </div>\n        )}\n        {this.state.eatingStage && (\n          <EatingBoard\n            squares={this.state.squares}\n            onClick={e => this.sendSushi()}\n            placed={this.props.placed}\n            lastBidding={this.state.lastBidding}\n            eatOwn={e => this.eatOwnSushi()}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}