{"ast":null,"code":"import _slicedToArray from \"/Users/Johan/fugu/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Johan/fugu/src/Game.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport Swal from \"sweetalert2\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {\n      let title = winner === null ? \"Tie game!\" : \"Player \".concat(winner, \" won!\"); // Show this if the player is not the room creator\n\n      if (this.props.isRoomCreator === false && this.gameOver) {\n        Swal.fire({\n          position: \"top\",\n          allowOutsideClick: false,\n          title: title,\n          text: \"Waiting for a new round...\",\n          confirmButtonColor: \"rgb(208,33,41)\",\n          width: 275,\n          customClass: {\n            heightAuto: false,\n            title: \"title-class\",\n            popup: \"popup-class\",\n            confirmButton: \"button-class\"\n          }\n        });\n        this.turn = 0; // Set turn to 1 so Player 2 can't make a move\n      } // Show this to the room creator\n      else if (this.props.isRoomCreator && this.gameOver) {\n          Swal.fire({\n            position: \"top\",\n            allowOutsideClick: false,\n            title: title,\n            text: \"Continue Playing?\",\n            showCancelButton: true,\n            confirmButtonColor: \"rgb(208,33,41)\",\n            cancelButtonColor: \"#aaa\",\n            cancelButtonText: \"Nope\",\n            confirmButtonText: \"Yea!\",\n            width: 275,\n            customClass: {\n              heightAuto: false,\n              title: \"title-class\",\n              popup: \"popup-class\",\n              confirmButton: \"button-class\",\n              cancelButton: \"button-class\"\n            }\n          }).then(result => {\n            // Start a new round\n            if (result.value) {\n              this.props.pubnub.publish({\n                message: {\n                  reset: true\n                },\n                channel: this.props.gameChannel\n              });\n            } else {\n              // End the game\n              this.props.pubnub.publish({\n                message: {\n                  endGame: true\n                },\n                channel: this.props.gameChannel\n              });\n            }\n          });\n        }\n    };\n\n    this.announceEating = (player, amount) => {\n      this.props.pubnub.publish({\n        message: {\n          eatingStage: true,\n          whoEating: player,\n          amount: amount\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.announceBidding = (e, player, lastAmount) => {\n      //tell other players the game is moving into the bidding phase\n      this.props.pubnub.publish({\n        message: {\n          bidding: true,\n          amountEaten: e,\n          ateBy: player,\n          lastAmount: lastAmount\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.announceWinner = winner => {\n      let pieces = {\n        X: this.state.xScore,\n        O: this.state.oScore\n      };\n\n      if (winner === \"X\") {\n        pieces[\"X\"] += 1;\n        this.setState({\n          xScore: pieces[\"X\"]\n        });\n      } else {\n        pieces[\"O\"] += 1;\n        this.setState({\n          oScore: pieces[\"O\"]\n        });\n      } // End the game once there is a winner\n\n\n      this.gameOver = true;\n      this.newRound(winner);\n    };\n\n    this.checkForWinner = squares => {\n      // Possible winning combinations\n      const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\n        const _possibleCombinations = _slicedToArray(possibleCombinations[i], 3),\n              a = _possibleCombinations[0],\n              b = _possibleCombinations[1],\n              c = _possibleCombinations[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          this.announceWinner(squares[a]);\n          return;\n        }\n      } // Check if the game ends in a draw\n\n\n      this.counter++; // The board is filled up and there is no winner\n\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.newRound(null);\n      }\n    };\n\n    this.myMove = e => {\n      //this.turn = this.turn === 1 ? 2 : 1;\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n    };\n\n    this.publishBidding = (e, player) => {\n      //Setter whos bidding til neste som skal spise\n      this.whosBidding = player + 1 === this.props.players.length ? 0 : player + 1;\n\n      if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n        if (this.state.passBidding) {\n          this.announceBidding(null, this.whosBidding, e);\n          this.setState({\n            whosTurn: !this.state.whosTurn\n          });\n        } else {\n          this.eat(e, this.whosBidding);\n        }\n      } else {\n        console.log(\"Noen andre skal spise akkuratt nÃ¥\");\n      }\n    };\n\n    this.onMakeMove = sushi => {\n      //const placed = this.props.placed;\n      console.log(\"We are about to make a move\"); // Check if the square is empty and if it's the player's turn to make a move\n      //squares[index] = this.props.piece;\n\n      this.setState({\n        whosTurn: !this.state.whosTurn\n      });\n      console.log(\"now this player is making a move\" + this.turn);\n      console.log(\"the total capacity is\" + this.props.occupancy); // Other player's turn to make a move\n\n      this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n      console.log(\" next move will be made by player \" + this.props.players[this.turn]); // Publish move to the channel\n\n      this.props.pubnub.publish({\n        message: {\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });\n      console.log(\"We made a move\"); //Check if there is a winner\n      //this.checkForWinner(squares);\n    };\n\n    this.eat = (e, player) => {\n      const a = parseInt(e) + 1;\n      Swal.fire({\n        title: \"How many pieces do you think you can eat?\",\n        input: \"number\",\n        showCancelButton: true,\n        cancelButtonText: \"Pass\",\n        cancelButtonColor: \"Orange\",\n        inputAttributes: {\n          min: a\n        },\n        confirmButtonText: \"Eat\",\n        allowOutsideClick: false\n      }).then(result => {\n        if (result.value) {\n          console.log(\"DU mener du kan spise \" + result.value);\n          this.bid = result.value;\n          this.announceBidding(result.value, player);\n        } else {\n          this.setState({\n            passBidding: true,\n            bidding: false\n          });\n          console.log(\"Du har passet\");\n          this.announceBidding(null, player, e);\n        }\n      });\n    };\n\n    this.showChoices = e => {\n      (async () => {\n        /* inputOptions can be an object or Promise */\n        const inputOptions = new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              true: \"Normal sushi\",\n              false: \"Fugu sushi\",\n              eat: \"Start bidding!\"\n            });\n          }, 1000);\n        });\n\n        const _ref = await Swal.fire({\n          title: \"What sushi would you like to place?\",\n          input: \"radio\",\n          inputOptions: inputOptions,\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n          confirmButtonText: \"Place sushi\",\n          inputValidator: value => {\n            if (!value) {\n              return \"You need to choose something!\";\n            } else {\n              if (value === \"true\" && !this.props.sushis.includes(true)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n\n              if (value === \"false\" && !this.props.sushis.includes(false)) {\n                return \"You do not have enough of this type of sushi!\";\n              }\n            }\n          }\n        }),\n              sushi = _ref.value;\n\n        if (sushi) {\n          if (sushi === \"eat\") {\n            this.whosBidding = this.turn;\n            this.announceBidding(0);\n            this.setState({\n              bidding: true\n            });\n            this.eat(0, this.whosBidding);\n          } else {\n            if (sushi === \"true\") {\n              this.props.placed.push(true);\n              this.props.sushis.shift();\n              console.log(\"this is what you have placed \" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.sushis);\n            }\n\n            if (sushi === \"false\") {\n              this.props.placed.push(false);\n              this.props.sushis.pop();\n              console.log(\"this is what you have placed\" + this.props.placed);\n              console.log(\"And this is what you have left \" + this.props.players);\n            }\n\n            this.onMakeMove(sushi); //Swal.fire({ html: `you selected ${sushi}` });\n\n            console.log(this.state.placed);\n            console.log(this.state.sushis);\n          }\n        }\n      })();\n    };\n\n    this.state = {\n      squares: Array(9).fill(\"\"),\n      // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n\n    };\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      if (msg.message.turn < 1000) {\n        console.log(\"vi er inne i den nye IFffen\");\n        this.turn = msg.message.turn;\n\n        if (this.props.players[msg.message.turn] === this.props.userName) {\n          this.myMove(msg.message.index, msg.message.piece);\n        }\n      } else if (msg.message.bidding) {\n        if (msg.message.amountEaten > 0) {\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n          console.log(\"Player \" + msg.message.ateBy + \"Ate \" + msg.message.amountEaten);\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n        } else if (msg.message.amountEaten === null) {\n          console.log(\"Last player passed\");\n\n          if (msg.message.lastAmount === this.bid) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n          }\n\n          this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n        } else {\n          console.log(\"Vi er inne i elsen og denne spilleren skal begynne Ã¥ spise \" + this.whosBidding);\n          this.setState({\n            bidding: true\n          });\n        }\n\n        console.log(\"LETS START BIDDING!\");\n      } else if (msg.message.eatingStage) {\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      } // Start a new round\n      else if (msg.message.reset) {\n          this.setState({\n            squares: Array(9).fill(\"\"),\n            whosTurn: this.props.myTurn\n          });\n          this.turn = 0;\n          this.gameOver = false;\n          this.counter = 0;\n          Swal.close();\n        } // End the game and go back to the lobby\n        else if (msg.message.endGame) {\n            Swal.close();\n            this.props.endGame();\n          }\n    });\n  }\n\n  render() {\n    let status; // Change to current player's turn\n\n    status = \"\".concat(this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\");\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: index => this.onMakeMove(index),\n      placed: this.props.placed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"functions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      className: \"move-button\",\n      disabled: !this.state.whosTurn,\n      onClick: e => this.showChoices(),\n      hidden: this.state.bidding || this.state.passBidding,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, \" \", \"Make move\"))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/Johan/fugu/src/Game.js"],"names":["React","Board","Swal","Game","Component","constructor","props","newRound","winner","title","isRoomCreator","gameOver","fire","position","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","value","pubnub","publish","message","reset","channel","gameChannel","endGame","announceEating","player","amount","eatingStage","whoEating","announceBidding","e","lastAmount","bidding","amountEaten","ateBy","announceWinner","pieces","X","state","xScore","O","oScore","setState","checkForWinner","squares","possibleCombinations","i","length","a","b","c","counter","myMove","whosTurn","publishBidding","whosBidding","players","indexOf","userName","passBidding","eat","console","log","onMakeMove","sushi","occupancy","piece","parseInt","input","inputAttributes","min","bid","showChoices","inputOptions","Promise","resolve","setTimeout","true","false","allowEscapeKey","inputValidator","sushis","includes","placed","push","shift","pop","Array","fill","myTurn","lastBidding","componentDidMount","getMessage","msg","index","close","render","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\nimport Swal from \"sweetalert2\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"\"), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false\n\n      //occupancy: this.props.pubnub.hereNow({\n      //channels: this.props.gameChannel\n      //})\n    };\n\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.counter = 0;\n    this.bid = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      if (msg.message.turn < 1000) {\n        console.log(\"vi er inne i den nye IFffen\");\n        this.turn = msg.message.turn;\n        if (this.props.players[msg.message.turn] === this.props.userName) {\n          this.myMove(msg.message.index, msg.message.piece);\n        }\n      } else if (msg.message.bidding) {\n        if (msg.message.amountEaten > 0) {\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n          console.log(\n            \"Player \" + msg.message.ateBy + \"Ate \" + msg.message.amountEaten\n          );\n          this.publishBidding(msg.message.amountEaten, msg.message.ateBy);\n        } else if (msg.message.amountEaten === null) {\n          console.log(\"Last player passed\");\n          if (msg.message.lastAmount === this.bid) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n          }\n          this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n        } else {\n          console.log(\n            \"Vi er inne i elsen og denne spilleren skal begynne Ã¥ spise \" +\n              this.whosBidding\n          );\n          this.setState({\n            bidding: true\n          });\n        }\n\n        console.log(\"LETS START BIDDING!\");\n      } else if (msg.message.eatingStage) {\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      }\n\n      // Start a new round\n      else if (msg.message.reset) {\n        this.setState({\n          squares: Array(9).fill(\"\"),\n          whosTurn: this.props.myTurn\n        });\n\n        this.turn = 0;\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close();\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  newRound = winner => {\n    let title = winner === null ? \"Tie game!\" : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    if (this.props.isRoomCreator === false && this.gameOver) {\n      Swal.fire({\n        position: \"top\",\n        allowOutsideClick: false,\n        title: title,\n        text: \"Waiting for a new round...\",\n        confirmButtonColor: \"rgb(208,33,41)\",\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: \"title-class\",\n          popup: \"popup-class\",\n          confirmButton: \"button-class\"\n        }\n      });\n      this.turn = 0; // Set turn to 1 so Player 2 can't make a move\n    }\n\n    // Show this to the room creator\n    else if (this.props.isRoomCreator && this.gameOver) {\n      Swal.fire({\n        position: \"top\",\n        allowOutsideClick: false,\n        title: title,\n        text: \"Continue Playing?\",\n        showCancelButton: true,\n        confirmButtonColor: \"rgb(208,33,41)\",\n        cancelButtonColor: \"#aaa\",\n        cancelButtonText: \"Nope\",\n        confirmButtonText: \"Yea!\",\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: \"title-class\",\n          popup: \"popup-class\",\n          confirmButton: \"button-class\",\n          cancelButton: \"button-class\"\n        }\n      }).then(result => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        } else {\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      });\n    }\n  };\n  announceEating = (player, amount) => {\n    this.props.pubnub.publish({\n      message: {\n        eatingStage: true,\n        whoEating: player,\n        amount: amount\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  announceBidding = (e, player, lastAmount) => {\n    //tell other players the game is moving into the bidding phase\n    this.props.pubnub.publish({\n      message: {\n        bidding: true,\n        amountEaten: e,\n        ateBy: player,\n        lastAmount: lastAmount\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  // Update score for the winner\n  announceWinner = winner => {\n    let pieces = {\n      X: this.state.xScore,\n      O: this.state.oScore\n    };\n\n    if (winner === \"X\") {\n      pieces[\"X\"] += 1;\n      this.setState({\n        xScore: pieces[\"X\"]\n      });\n    } else {\n      pieces[\"O\"] += 1;\n      this.setState({\n        oScore: pieces[\"O\"]\n      });\n    }\n    // End the game once there is a winner\n    this.gameOver = true;\n    this.newRound(winner);\n  };\n\n  checkForWinner = squares => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter++;\n    // The board is filled up and there is no winner\n    if (this.counter === 9) {\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n\n  // Opponent's move is annpunced\n  myMove = e => {\n    //this.turn = this.turn === 1 ? 2 : 1;\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n  };\n\n  publishBidding = (e, player) => {\n    //Setter whos bidding til neste som skal spise\n    this.whosBidding =\n      player + 1 === this.props.players.length ? 0 : player + 1;\n    if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n      if (this.state.passBidding) {\n        this.announceBidding(null, this.whosBidding, e);\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n      } else {\n        this.eat(e, this.whosBidding);\n      }\n    } else {\n      console.log(\"Noen andre skal spise akkuratt nÃ¥\");\n    }\n  };\n\n  onMakeMove = sushi => {\n    //const placed = this.props.placed;\n    console.log(\"We are about to make a move\");\n\n    // Check if the square is empty and if it's the player's turn to make a move\n\n    //squares[index] = this.props.piece;\n\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n    console.log(\"now this player is making a move\" + this.turn);\n    console.log(\"the total capacity is\" + this.props.occupancy);\n\n    // Other player's turn to make a move\n    this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n    console.log(\n      \" next move will be made by player \" + this.props.players[this.turn]\n    );\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        piece: this.props.piece,\n        turn: this.turn\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"We made a move\");\n\n    //Check if there is a winner\n    //this.checkForWinner(squares);\n  };\n  eat = (e, player) => {\n    const a = parseInt(e) + 1;\n    Swal.fire({\n      title: \"How many pieces do you think you can eat?\",\n      input: \"number\",\n      showCancelButton: true,\n      cancelButtonText: \"Pass\",\n      cancelButtonColor: \"Orange\",\n      inputAttributes: {\n        min: a\n      },\n      confirmButtonText: \"Eat\",\n      allowOutsideClick: false\n    }).then(result => {\n      if (result.value) {\n        console.log(\"DU mener du kan spise \" + result.value);\n        this.bid = result.value;\n        this.announceBidding(result.value, player);\n      } else {\n        this.setState({\n          passBidding: true,\n          bidding: false\n        });\n        console.log(\"Du har passet\");\n        this.announceBidding(null, player, e);\n      }\n    });\n  };\n\n  showChoices = e => {\n    (async () => {\n      /* inputOptions can be an object or Promise */\n      const inputOptions = new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            true: \"Normal sushi\",\n            false: \"Fugu sushi\",\n            eat: \"Start bidding!\"\n          });\n        }, 1000);\n      });\n\n      const { value: sushi } = await Swal.fire({\n        title: \"What sushi would you like to place?\",\n        input: \"radio\",\n        inputOptions: inputOptions,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        confirmButtonText: \"Place sushi\",\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to choose something!\";\n          } else {\n            if (value === \"true\" && !this.props.sushis.includes(true)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n\n            if (value === \"false\" && !this.props.sushis.includes(false)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n          }\n        }\n      });\n\n      if (sushi) {\n        if (sushi === \"eat\") {\n          this.whosBidding = this.turn;\n          this.announceBidding(0);\n          this.setState({\n            bidding: true\n          });\n          this.eat(0, this.whosBidding);\n        } else {\n          if (sushi === \"true\") {\n            this.props.placed.push(true);\n            this.props.sushis.shift();\n            console.log(\"this is what you have placed \" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.sushis);\n          }\n          if (sushi === \"false\") {\n            this.props.placed.push(false);\n            this.props.sushis.pop();\n            console.log(\"this is what you have placed\" + this.props.placed);\n            console.log(\"And this is what you have left \" + this.props.players);\n          }\n          this.onMakeMove(sushi);\n          //Swal.fire({ html: `you selected ${sushi}` });\n          console.log(this.state.placed);\n          console.log(this.state.sushis);\n        }\n      }\n    })();\n  };\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <Board\n            squares={this.state.squares}\n            onClick={index => this.onMakeMove(index)}\n            placed={this.props.placed}\n          />\n          <div id=\"functions\">\n            <p className=\"status-info\">{status}</p>\n            <button\n              className=\"move-button\"\n              disabled={!this.state.whosTurn}\n              onClick={e => this.showChoices()}\n              hidden={this.state.bidding || this.state.passBidding}\n            >\n              {\" \"}\n              Make move\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}