{"version":3,"sources":["Board.js","EatingBoard.js","Game.js","App.js","index.js"],"names":["Board","props","Object","classCallCheck","this","_super","call","react_default","a","createElement","id","src","alt","hidden","placed","length","score","React","Component","EatingBoard","lastBidding","className","onClick","widt","heigh","eatOwn","Game","_this","newRound","player","console","log","state","setState","whosTurn","bidding","passBidding","eatingStage","piecesClone","toConsumableArray","pieces","sushis","bid","turn","players","indexOf","userName","whosBidding","passedPlayers","announceEating","amount","pubnub","publish","message","whoEating","channel","gameChannel","announceBidding","e","lastAmount","amountBidden","ateBy","annouceWinner","bidder","success","reset","annouceFail","failed","myMove","publishBidding","makeBid","onMakeMove","sushi","occupancy","piece","parseInt","Swal","fire","title","input","showCancelButton","cancelButtonText","cancelButtonColor","inputAttributes","min","max","confirmButtonText","allowOutsideClick","inputValidator","value","then","result","showChoices","asyncToGenerator","regenerator_default","mark","_callee","inputOptions","_yield$Swal$fire","wrap","_context","prev","next","Promise","resolve","setTimeout","true","false","eat","allowEscapeKey","includes","sent","push","shift","pop","stop","sendSushi","clicked","eatOwnSushi","LoosePiece","timerInterval","html","timer","timerProgressBar","didOpen","showLoading","setInterval","content","getContent","b","querySelector","textContent","getTimerLeft","willClose","clearInterval","dismiss","DismissReason","eatSushi","Math","floor","random","myTurn","nextRound","gameOver","roundCounter","_this2","getMessage","msg","index","close","type","text","endGame","status","_this3","concat","src_Board","squares","disabled","src_EatingBoard","App","onPressCreate","roomId","shortid","generate","substring","lobbyChannel","subscribe","channels","withPresence","mixin","progressSteps","customClass","heightAuto","popup","confirmButton","queue","answer","JSON","stringify","editedAnswer","isRoomCreator","isDisabled","onPressJoin","answers","joinRoom","getNumberInChannel","username","hereNow","response","totalOccupancy","newPlayer","position","width","padding","catch","error","startGame","gameStarted","isPlaying","unsubscribe","showRules","PubNubReact","publishKey","subscribeKey","init","assertThisInitialized","src_Game","xUsername","oUsername","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.623e8035.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id=\"backgroundBoard\">\n        <img\n          id=\"emptyBoard\"\n          src=\"https://i.imgur.com/7IUT4ST.png\"\n          alt=\"board0\"\n          hidden={!(this.props.placed.length === 0)}\n        ></img>\n        <img\n          id=\"fuguBoard\"\n          src=\"https://i.imgur.com/dKdsH8k.png\"\n          alt=\"board1\"\n          hidden={!(this.props.placed.length === 1)}\n        ></img>\n        <img\n          id=\"fuguBoard\"\n          src=\"https://i.imgur.com/KPxm6pm.png\"\n          alt=\"board2\"\n          hidden={!(this.props.placed.length === 2)}\n        ></img>\n        <img\n          id=\"fuguBoard\"\n          src=\"https://i.imgur.com/fXntS4Z.png\"\n          alt=\"board3\"\n          hidden={!(this.props.placed.length === 3)}\n        ></img>\n        <img\n          id=\"fuguBoard\"\n          src=\"https://i.imgur.com/jWC9bxQ.png\"\n          alt=\"board4\"\n          hidden={!(this.props.placed.length === 4)}\n        ></img>\n        <img\n          id=\"chopSticks\"\n          src=\"https://i.imgur.com/3hjNxRF.png\"\n          alt=\"chopstick2\"\n          hidden={!(this.props.score === 2)}\n        ></img>\n        <img\n          id=\"chopSticks\"\n          src=\"https://i.imgur.com/gapO3dn.png\"\n          alt=\"chopstick1\"\n          hidden={!(this.props.score === 1)}\n        ></img>\n        <img\n          id=\"chopSticks\"\n          src=\"https://i.imgur.com/7ucOo7F.png\"\n          alt=\"chopstick0\"\n          hidden={!(this.props.score === 0)}\n        ></img>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\n\nclass EatingBoard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id=\"backgroundBoard\">\n        {!this.props.lastBidding && (\n          <button className=\"boardButton\" onClick={this.props.onClick}>\n            <img\n              id=\"emptyBoard\"\n              src=\"https://i.imgur.com/7IUT4ST.png\"\n              alt=\"board0\"\n              hidden={!(this.props.placed.length === 0)}\n            ></img>\n            <img\n              id=\"fuguBoard\"\n              src=\"https://i.imgur.com/dKdsH8k.png\"\n              alt=\"board1\"\n              hidden={!(this.props.placed.length === 1)}\n            ></img>\n            <img\n              id=\"fuguBoard\"\n              src=\"https://i.imgur.com/KPxm6pm.png\"\n              alt=\"board2\"\n              hidden={!(this.props.placed.length === 2)}\n            ></img>\n            <img\n              id=\"fuguBoard\"\n              src=\"https://i.imgur.com/fXntS4Z.png\"\n              alt=\"board3\"\n              hidden={!(this.props.placed.length === 3)}\n            ></img>\n            <img\n              id=\"fuguBoard\"\n              src=\"https://i.imgur.com/jWC9bxQ.png\"\n              alt=\"board4\"\n              hidden={!(this.props.placed.length === 4)}\n            ></img>\n          </button>\n        )}\n        {this.props.lastBidding && (\n          <img\n            src=\"https://i.imgur.com/y1DXfJk.png\"\n            alt=\"Welcome to FUGU\"\n            widt=\"30px\"\n            heigh=\"30px\"\n          />\n        )}\n        <img\n          id=\"chopSticks\"\n          src=\"https://i.imgur.com/3hjNxRF.png\"\n          alt=\"chopstick2\"\n          hidden={!(this.props.score === 2)}\n        ></img>\n        <img\n          id=\"chopSticks\"\n          src=\"https://i.imgur.com/gapO3dn.png\"\n          alt=\"chopstick1\"\n          hidden={!(this.props.score === 1)}\n        ></img>\n        <img\n          id=\"chopSticks\"\n          src=\"https://i.imgur.com/7ucOo7F.png\"\n          alt=\"chopstick0\"\n          hidden={!(this.props.score === 0)}\n        ></img>\n        <button onClick={this.props.eatOwn} hidden={!this.props.lastBidding}>\n          {\" \"}\n          Eat Your sushis\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default EatingBoard;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport EatingBoard from \"./EatingBoard\";\nimport Swal from \"sweetalert2\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      whosTurn: this.props.myTurn,\n      bidding: false,\n      passBidding: false,\n      lastBidding: false,\n      eatingStage: false,\n      nextRound: false,\n      placed: this.props.placed\n    };\n    this.pieces = [true, true, true, false];\n    this.sushis = [true, true, true, false];\n    this.turn = 0;\n    this.whosBidding = null;\n    this.gameOver = false;\n    this.roundCounter = 0;\n    this.bid = 0;\n    this.passedPlayers = [];\n    this.score = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      this.turn = msg.message.turn;\n      //Makes it the right players turn\n      if (this.props.players[msg.message.turn] === this.props.userName) {\n        this.myMove(msg.message.index, msg.message.piece);\n      }\n      //Sets the game into bidding stage\n      else if (msg.message.bidding) {\n        if (msg.message.amountBidden > 0) {\n          this.publishBidding(msg.message.amountBidden, msg.message.ateBy);\n          console.log(\n            \"Player \" + msg.message.ateBy + \"bid \" + msg.message.amountBidden\n          );\n          this.publishBidding(msg.message.amountBidden, msg.message.ateBy);\n        } else if (msg.message.amountBidden === null) {\n          console.log(msg.message.ateBy + \" passed\");\n          if (!this.passedPlayers.includes(msg.message.ateBy)) {\n            this.passedPlayers.push(msg.message.ateBy);\n          }\n\n          if (\n            this.passedPlayers.length === this.props.players.length - 1 &&\n            !this.state.passBidding\n          ) {\n            console.log(\"du er den siste som er igjen\");\n            this.setState({\n              lastBidding: true\n            });\n            this.announceEating(this.userName, this.bid);\n            Swal.close();\n          } else {\n            this.publishBidding(msg.message.lastAmount, msg.message.ateBy);\n          }\n        } else {\n          console.log(\n            \"Vi er inne i elsen og denne spilleren skal begynne å by \" +\n              this.whosBidding\n          );\n          this.setState({\n            bidding: true\n          });\n        }\n        console.log(\"LETS START BIDDING!\");\n      }\n      //Sets the game into the eating stage\n      else if (msg.message.eatingStage) {\n        Swal.close();\n        this.setState({\n          eatingStage: true,\n          bidding: false\n        });\n        console.log(\"eating stage\");\n      }\n      //Eating player recives the sushi they clicked\n      else if (msg.message.clicked && this.state.lastBidding) {\n        this.eatSushi(msg.message.sushi);\n      }\n      //Fails the eating attempt\n      else if (msg.message.failed) {\n        Swal.fire({\n          type: \"error\",\n          title: \"Oops...\",\n          text:\n            \"The attempt failed. The atempting player will loose a random sushi.\"\n        }).then(result => {\n          this.newRound(msg.message.userName);\n          console.log(\"Nå ble den trykket\");\n        });\n      }\n      //The eating attempt is a success\n      else if (msg.message.success) {\n        Swal.fire({\n          type: \"success\",\n          title: \"Wohooo!\",\n          confirmButtonText: \"Next Round\",\n          text:\n            \"The attempt was a success. The atempting player will receive one point!.\"\n        }).then(result => {\n          this.newRound(msg.message.userName);\n          console.log(\"Nå ble den trykket\");\n        });\n        console.log(\"The bet was successfull\");\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n  newRound = player => {\n    console.log(\"NEW ROUND BLIR KJØRT\");\n\n    if (this.state.lastBidding) {\n      //Makes the one who bidded highest last round start\n      this.setState({\n        whosTurn: true,\n        bidding: false,\n        passBidding: false,\n        lastBidding: false,\n        eatingStage: false,\n        placed: []\n      });\n      const piecesClone = [...this.pieces];\n      this.sushis = piecesClone;\n      this.bid = 0;\n      this.turn = this.props.players.indexOf(this.props.userName);\n      this.whosBidding = null;\n      this.passedPlayers = [];\n    } else {\n      // Resets for everyone else\n      console.log(\"nullstiller for ikke høyeste budgiver\");\n      this.setState({\n        whosTurn: false,\n        bidding: false,\n        passBidding: false,\n        lastBidding: false,\n        eatingStage: false,\n        placed: []\n      });\n      const piecesClone = [...this.pieces];\n      this.sushis = piecesClone;\n      this.turn = this.props.players.indexOf(player);\n      this.bid = 0;\n      this.whosBidding = null;\n      this.passedPlayers = [];\n    }\n  };\n  announceEating = (player, amount) => {\n    this.props.pubnub.publish({\n      message: {\n        eatingStage: true,\n        whoEating: player,\n        amount: amount,\n        bidding: false\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  announceBidding = (e, player, lastAmount) => {\n    //tell other players the game is moving into the bidding phase\n    this.props.pubnub.publish({\n      message: {\n        bidding: true,\n        amountBidden: e,\n        ateBy: player,\n        lastAmount: lastAmount\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  annouceWinner = bidder => {\n    console.log(\"Announce winner\");\n    this.score += 1;\n    console.log(this.score);\n    this.props.pubnub.publish({\n      message: {\n        success: true,\n        userName: this.props.userName,\n        reset: true\n      },\n      channel: this.props.gameChannel\n    });\n  };\n  annouceFail = bidder => {\n    this.props.pubnub.publish({\n      message: {\n        failed: true,\n        userName: this.props.userName,\n        reset: true\n      },\n      channel: this.props.gameChannel\n    });\n  };\n\n  // Opponent's move is annpunced\n  myMove = e => {\n    //this.turn = this.turn === 1 ? 2 : 1;\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n  };\n\n  publishBidding = (e, player) => {\n    //Setter whos bidding til neste som skal spise\n    this.whosBidding =\n      player + 1 === this.props.players.length ? 0 : player + 1;\n    if (this.whosBidding === this.props.players.indexOf(this.props.userName)) {\n      if (this.state.passBidding) {\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n        this.announceBidding(null, this.whosBidding, e);\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n      } else {\n        this.setState({\n          whosTurn: true\n        });\n        this.makeBid(e, this.whosBidding);\n      }\n    } else {\n      console.log(\"Noen andre skal spise akkuratt nå\");\n    }\n  };\n\n  onMakeMove = sushi => {\n    console.log(\"We are about to make a move\");\n\n    // Check if the square is empty and if it's the player's turn to make a move\n\n    //squares[index] = this.props.piece;\n\n    this.setState({\n      whosTurn: !this.state.whosTurn\n    });\n    console.log(\"now this player is making a move\" + this.turn);\n    console.log(\"the total capacity is\" + this.props.occupancy);\n\n    // Other player's turn to make a move\n    this.turn = this.turn + 1 === this.props.players.length ? 0 : this.turn + 1;\n    console.log(\n      \" next move will be made by player \" + this.props.players[this.turn]\n    );\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        piece: this.props.piece,\n        turn: this.turn\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"We made a move\");\n\n    //Check if there is a winner\n    //this.checkForWinner(squares);\n  };\n  makeBid = (e, player) => {\n    if (this.state.lastBidding) {\n      return;\n    }\n    const a = parseInt(e) + 1;\n    console.log(\"The last amount you bid was\" + this.bid);\n    Swal.fire({\n      title: \"How many pieces do you think you can eat?\",\n      input: \"number\",\n      showCancelButton: true,\n      cancelButtonText: \"Pass\",\n      cancelButtonColor: \"Orange\",\n      inputAttributes: {\n        min: a,\n        max: this.props.players.length * 4\n      },\n      confirmButtonText: \"Bid\",\n      allowOutsideClick: false,\n      inputValidator: value => {\n        if (value === 0) {\n          return \"You need to bid at least one sushi\";\n        }\n      }\n    }).then(result => {\n      if (result.value) {\n        console.log(\"DU mener du kan spise \" + result.value);\n        this.bid = result.value;\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n        this.announceBidding(result.value, player);\n      } else {\n        this.setState({\n          passBidding: true,\n          bidding: false\n        });\n        console.log(\"Du har passet\");\n        this.setState({\n          whosTurn: !this.state.whosTurn\n        });\n        this.announceBidding(null, player, e);\n      }\n    });\n  };\n\n  showChoices = e => {\n    (async () => {\n      /* inputOptions can be an object or Promise */\n      const inputOptions = new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            true: \"Normal sushi\",\n            false: \"Fugu sushi\",\n            eat: \"Start bidding!\"\n          });\n        }, 1000);\n      });\n\n      const { value: sushi } = await Swal.fire({\n        title: \"What sushi would you like to place?\",\n        input: \"radio\",\n        inputOptions: inputOptions,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        confirmButtonText: \"Make move\",\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to choose something!\";\n          } else {\n            if (value === \"true\" && !this.sushis.includes(true)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n\n            if (value === \"false\" && !this.sushis.includes(false)) {\n              return \"You do not have enough of this type of sushi!\";\n            }\n            if (value === \"eat\" && this.state.placed.length === 0) {\n              return \"You have not placed any sushis yet\";\n            }\n          }\n        }\n      });\n\n      if (sushi) {\n        if (sushi === \"eat\") {\n          this.whosBidding = this.turn;\n          this.announceBidding(0);\n          this.setState({\n            bidding: true\n          });\n          this.makeBid(0, this.whosBidding);\n        } else {\n          if (sushi === \"true\") {\n            this.state.placed.push(true);\n            this.sushis.shift();\n            console.log(\"this is what you have placed \" + this.state.placed);\n            console.log(\"And this is what you have left \" + this.sushis);\n          }\n          if (sushi === \"false\") {\n            this.state.placed.push(false);\n            this.sushis.pop();\n            console.log(\"this is what you have placed\" + this.state.placed);\n            console.log(\"And this is what you have left \" + this.props.players);\n          }\n          this.onMakeMove(sushi);\n          console.log(this.state.placed);\n          console.log(this.sushis);\n        }\n      }\n    })();\n  };\n  //If their screen is clicked they send a sushi to the last bidder.\n  sendSushi = e => {\n    this.props.pubnub.publish({\n      message: {\n        clicked: true,\n        sushi: this.state.placed.pop()\n      },\n      channel: this.props.gameChannel\n    });\n    console.log(\"Sushi har blitt sendt\");\n  };\n  //Eats all their own sushi at once. Fails bid if not enough sushis.\n  eatOwnSushi = placed => {\n    while (this.state.placed.length > 0) {\n      const s = this.state.placed.pop();\n      if (!s) {\n        this.LoosePiece();\n        this.annouceFail();\n        break;\n      } else {\n        this.bid -= 1;\n        if (this.bid === 0) {\n          this.annouceWinner();\n          break;\n        }\n      }\n    }\n    let timerInterval;\n    Swal.fire({\n      title: \"You ate alll your sushis!\",\n      html: \"You can start to eat your opponments sushi now!\",\n      timer: 2000,\n      timerProgressBar: true,\n      didOpen: () => {\n        Swal.showLoading();\n        timerInterval = setInterval(() => {\n          const content = Swal.getContent();\n          if (content) {\n            const b = content.querySelector(\"b\");\n            if (b) {\n              b.textContent = Swal.getTimerLeft();\n            }\n          }\n        }, 100);\n      },\n      willClose: () => {\n        clearInterval(timerInterval);\n      }\n    }).then(result => {\n      /* Read more about handling dismissals below */\n      if (result.dismiss === Swal.DismissReason.timer) {\n        console.log(\"I was closed by the timer\");\n      }\n    });\n    console.log(\"Vi er ferdig meg while løkken\");\n    console.log(this.bid);\n  };\n\n  eatSushi = sushi => {\n    console.log(\"Nå skal vi spise en sushi\");\n    if (!sushi) {\n      this.LoosePiece();\n      this.annouceFail(); //This person has failed the attempt and looses a piece.\n    } else if (sushi) {\n      this.bid -= 1;\n      console.log(\"Vi har trukket fra en sushi\");\n      console.log(this.bid);\n      if (this.bid === 0) {\n        this.annouceWinner();\n      }\n    }\n  };\n\n  LoosePiece = e => {\n    if (this.pieces.includes(false)) {\n      const n = Math.floor(Math.random() * this.pieces.length);\n      if (n === 1) {\n        this.pieces.pop();\n        console.log(\"Du mistet en fugu sushi\");\n      } else {\n        this.pieces.shift();\n        console.log(\"Du mistet en vanlig sushi\");\n      }\n    } else {\n      this.pieces.pop();\n      console.log(\n        \"Du mistet en valig sushi siden du ikke har noen fuguer igjen\"\n      );\n    }\n  };\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        {!this.state.eatingStage && (\n          <div className=\"board\">\n            <Board\n              squares={this.state.squares}\n              //onClick={index => this.onMakeMove(index)}\n              placed={this.state.placed}\n              score={this.score}\n            />\n            <div id=\"functions\">\n              <p className=\"status-info\">{status}</p>\n              <button\n                className=\"move-button\"\n                disabled={!this.state.whosTurn}\n                onClick={e => this.showChoices()}\n                hidden={\n                  this.state.bidding ||\n                  this.state.passBidding ||\n                  this.state.eatingStage\n                }\n              >\n                {\" \"}\n                Make move\n              </button>\n            </div>\n          </div>\n        )}\n        {this.state.eatingStage && (\n          <EatingBoard\n            squares={this.state.squares}\n            onClick={e => this.sendSushi()}\n            placed={this.state.placed}\n            lastBidding={this.state.lastBidding}\n            eatOwn={e => this.eatOwnSushi()}\n            score={this.score}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport Game from \"./Game\";\n//import Board from \"./Board\";\nimport PubNubReact from \"pubnub-react\";\nimport Swal from \"sweetalert2\";\nimport shortid from \"shortid\";\nimport \"./Game.css\";\n\n//import { placeholder } from \"@babel/types\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-fae6dfb9-0fd1-4b5e-a0f3-a3d4511085e9\",\n      subscribeKey: \"sub-c-0b5e637c-3675-11eb-b6eb-96faa39b9528\"\n    });\n\n    this.state = {\n      piece: \"\",\n      sushis: [],\n      placed: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false\n    };\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n    this.userName = null;\n    this.players = [];\n    this.pieces = [true, true, true, false];\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  }\n\n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, msg => {\n        if (msg.message.newPlayer) {\n          this.players.push(msg.message.userName);\n        }\n        // Start the game once an opponent joins the channel\n        if (msg.message.gameStarted) {\n          // Create a different channel for the game\n          this.gameChannel = \"fuguegame--\" + this.roomId;\n          this.players = msg.message.players;\n\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n\n          this.setState({\n            isPlaying: true\n          });\n\n          // Close the modals if they are opened\n          Swal.close();\n          console.log(this.state.sushis);\n          /*\n          (async () => {\n            const inputOptions = new Promise(resolve => {\n              setTimeout(() => {\n                resolve({\n                  true: \"Normal sushi\",\n                  false: \"Fugu sushi\"\n                });\n              }, 1000);\n            });\n\n            const { value: sushi } = await Swal.fire({\n              title: \"Choose your first move\",\n              input: \"radio\",\n              inputOptions: inputOptions,\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              confirmButtonText: \"Place sushi\",\n              inputValidator: value => {\n                if (!value) {\n                  return \"You need to choose something!\";\n                } else {\n                  if (value === \"true\" && !this.state.sushis.includes(true)) {\n                    return \"You do not have enough of this type of sushi!\";\n                  }\n                  if (value === \"false\" && !this.state.sushis.includes(false)) {\n                    return \"You do not have enough of this type of sushi!\";\n                  }\n                }\n              }\n            });\n\n            if (sushi) {\n              if (sushi === \"true\") {\n                this.state.placed.push(true);\n                this.state.sushis.shift();\n              }\n              if (sushi === \"false\") {\n                this.state.placed.push(false);\n                this.state.sushis.pop();\n              }\n              Swal.fire({ html: `you selected ${sushi}` });\n              console.log(this.state.placed);\n              console.log(this.state.sushis);\n            }\n          })();\n\n          */\n        }\n      });\n    }\n  }\n\n  // Create a room channel\n  onPressCreate = e => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0, 5);\n    this.lobbyChannel = \"fugulobby--\" + this.roomId;\n    //this.userName = \"Johan\";\n    //this.players.push(\"Johan\");\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    // Open the modal\n    Swal.mixin({\n      allowOutsideClick: false,\n\n      progressSteps: [\"1\", \"2\"],\n      // Custom CSS\n      customClass: {\n        heightAuto: false,\n        title: \"title-class\",\n        popup: \"popup-class\",\n        confirmButton: \"button-class\"\n      }\n    })\n      .queue([\n        { title: \"Share this room ID with your friend\", text: this.roomId },\n        { title: \"Enter your username\", input: \"text\" }\n      ])\n      .then(result => {\n        const answer = JSON.stringify(result.value[1]);\n        const editedAnswer = answer.substring(1, answer.length - 1);\n        console.log(editedAnswer);\n        this.userName = editedAnswer;\n        this.players.push(editedAnswer);\n      });\n\n    this.setState({\n      piece: 1,\n      sushis: [true, true, true, false],\n      isRoomCreator: true,\n      isDisabled: true, // Disable the 'Create' button\n      myTurn: true // Room creator makes the 1st move\n    });\n  };\n\n  // The 'Join' button was pressed\n  onPressJoin = e => {\n    Swal.mixin({\n      input: \"text\",\n      confirmButtonText: \"Next &rarr;\",\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\"]\n    })\n      .queue([\n        {\n          title: \"Game Pin\",\n          text: \"Enter the 5 characters that is unique for your game\"\n        },\n        {\n          title: \"Username\",\n          text: \"Enter the username you would like to be called \"\n        }\n      ])\n      .then(result => {\n        if (result.value) {\n          const answers = JSON.stringify(result.value);\n          Swal.fire({\n            title: \"All done!\",\n            html: `\n            Your answers:\n            <pre><code>${answers}</code></pre>\n          `,\n            confirmButtonText: \"Lovely!\"\n          });\n          this.userName = result.value[1];\n          this.joinRoom(result.value[0], result.value[1]);\n        }\n      });\n  };\n  getNumberInChannel = e => {\n    console.log(this.players);\n  };\n\n  // Join a room channel\n  joinRoom = (value, username) => {\n    this.roomId = value;\n    this.lobbyChannel = \"fugulobby--\" + this.roomId;\n\n    // Check the number of people in the channel\n    this.pubnub\n      .hereNow({\n        channels: [this.lobbyChannel]\n      })\n      .then(response => {\n        if (response.totalOccupancy < 200) {\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n\n          this.setState({\n            piece: response.totalOccupancy + 1,\n            sushis: [true, true, true, false]\n          });\n\n          console.log(\"Joined game as player \" + this.state.piece);\n\n          this.pubnub.publish({\n            message: {\n              newPlayer: true,\n              userName: username\n            },\n            channel: this.lobbyChannel\n          });\n        } else {\n          // Game in progress\n          Swal.fire({\n            position: \"top\",\n            allowOutsideClick: false,\n            title: \"Error\",\n            text: \"Game in progress. Try another room.\",\n            width: 275,\n            padding: \"0.7em\",\n            customClass: {\n              heightAuto: false,\n              title: \"title-class\",\n              popup: \"popup-class\",\n              confirmButton: \"button-class\"\n            }\n          });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  startGame = e => {\n    this.pubnub.publish({\n      message: {\n        gameStarted: true,\n        players: this.players\n      },\n      channel: this.lobbyChannel\n    });\n  };\n\n  // Reset everything\n  endGame = () => {\n    this.setState({\n      piece: \"\",\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false\n    });\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;\n\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  };\n  showRules = e => {\n    Swal.mixin({\n      input: \"Rules\",\n      type: \"info\",\n      confirmButtonText: \"Next &rarr;\",\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    })\n      .queue([\n        {\n          title: \"In short\",\n          text:\n            \"Fugu is the quintessence of bluffing, a game in which everything is played in the players' heads. Each player plays a sushi, then each player in turn adds one more sushi – until someone feels safe enough to state that he can eat a number of sushis and only eat normal sushis, and dodge the poisonous fugu sushi. Other players can then overbid him, saying they can eat even more sushis without eating any fugu suhis. The highest bidder must then eat that number of sushis, starting with eating all his own sushis. If he eat only normal sushis, he wins; if he eats a fugu sushi, he loses, one of his sushis will then randomly be taken out of play. You receive one chopstick for a successful challange. The first player to get a pair of chopsticks wins. Fugu is not a game of luck; it's a game of poker face and meeting eyes.  swal2 modals is easy\"\n        },\n        {\n          title: \"Basics\",\n          text:\n            \"All players start out with a total of 4 sushis. 1 poisounus fugu sushi, and 3 normal sushis. The goal is to achive two chopstick, by betting correct two times. If you fail a bet, one piece of sushi will be removed from your sushi stack.\"\n        },\n        {\n          title: \"Placing a sushi\",\n          text:\n            \"you click the make move button in the bottom left corner. You then check of either Normal sushi or Fugu sushi, depending on what type of sushi you want to place\"\n        },\n        {\n          title: \"Eat your own sushi \",\n          text:\n            \"if you are the highest bidder you will taken to a screen with a fugu fish.You  HAVE TO eat your own sushi before you start eating your opponents sushi. In order to eat your own sushi you click the “eat own sushi” button in the bottom left corner.\"\n        },\n        {\n          title: \"Eating the opponents’ sushi  \",\n          text:\n            \"After you have eaten your own sushi you can start eating the others sushi. In order to eat other peoples sushi, you simply tap their sushi board. You will eat the last placed sushi first, and then the next to last. You can always change which opponent you eat a sushi from. When you have eaten enough sushis a success screen will pop up. If you eat a fugu sushi you a failure screen will pop up. \"\n        }\n      ])\n      .then(result => {\n        if (result.value) {\n          const answers = JSON.stringify(result.value);\n          Swal.fire({\n            title: \"Have fun!\",\n            confirmButtonText: \"Lovely!\"\n          });\n        }\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"backGround-Brown\">\n        <div className=\"title\">\n          <p>¡FUGU!</p>\n        </div>\n        <div className=\"gamePin\"></div>\n\n        {!this.state.isPlaying && (\n          <div className=\"game\">\n            <p>Gamepin: {this.roomId} </p>\n            <p> Velkommen {this.userName}</p>\n            <img\n              src=\"https://i.imgur.com/y1DXfJk.png\"\n              alt=\"Welcome to FUGU\"\n              widt=\"30px\"\n              heigh=\"30px\"\n            />\n            <div className=\"button-container\">\n              <button onClick={e => this.showRules()} className=\"create-button\">\n                Rules\n              </button>\n              <button\n                className=\"create-button \"\n                disabled={this.state.isDisabled}\n                onClick={e => this.onPressCreate()}\n              >\n                {\" \"}\n                Create\n              </button>\n              <button className=\"join-button\" onClick={e => this.onPressJoin()}>\n                {\" \"}\n                Join\n              </button>\n              <button\n                className=\"start-button\"\n                hidden={!this.state.isRoomCreator}\n                onClick={e => this.startGame()}\n              >\n                {\" \"}\n                Start\n              </button>\n            </div>\n          </div>\n        )}\n\n        {this.state.isPlaying && (\n          <Game\n            pubnub={this.pubnub}\n            gameChannel={this.gameChannel}\n            piece={this.state.piece}\n            isRoomCreator={this.state.isRoomCreator}\n            myTurn={this.state.myTurn}\n            xUsername={this.state.xUsername}\n            oUsername={this.state.oUsername}\n            endGame={this.endGame}\n            placed={this.state.placed}\n            sushis={this.state.sushis}\n            occupancy={this.players.length}\n            players={this.players}\n            userName={this.userName}\n            pieces={this.pieces}\n            isPlaying={this.isPlaying}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}